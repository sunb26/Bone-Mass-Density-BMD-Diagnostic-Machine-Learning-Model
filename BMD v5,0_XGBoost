{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"BMD v5,0:XGBoost","provenance":[],"authorship_tag":"ABX9TyNZUumtrPSJnYul0ey4SWYg"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"N-xs7gWNr5r0","colab_type":"code","colab":{}},"source":["import numpy as np\n","import pandas as pd\n","from xgboost import XGBClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, confusion_matrix\n","from sklearn.model_selection import KFold"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l5JxE4AKtNpZ","colab_type":"code","colab":{}},"source":["column_names = ['Diagnosis','Age','Sex','L1','L2','L3','L4', 'R1','R2', 'R3','Lf1','Lf2','Lf3']\n","\n","#Read files using pandas\n","raw_dataset = pd.read_csv(\"training.csv\", names=column_names, na_values = \"?\", comment='\\t', sep=\",\", skipinitialspace=True)\n","#shuffled_train_df = raw_dataset.reindex(np.random.permutation(raw_dataset))\n","\n","\n","target = 'Diagnosis'\n","X = raw_dataset.loc[:, raw_dataset.columns!= target]\n","Y = raw_dataset.loc[:, raw_dataset.columns==target]\n","\n","#Dataset split into test and train sets with 15% of the data becoming the test set\n","X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.05, random_state = 0)\n","\n","train_stats = X_train.describe()\n","train_stats = train_stats.transpose()\n","\n","#Same Normalization function as previous model\n","def norm(x):\n","  return (x - train_stats['mean']) / train_stats['std']\n","\n","x_train_normalized = norm(X_train)\n","x_test_normalized = norm(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"h20i9gXito6q","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":215},"executionInfo":{"status":"ok","timestamp":1597692969990,"user_tz":240,"elapsed":1205,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"7bdb69d2-9a8c-4ab4-d769-5ba84a4ff325"},"source":["#Resample Data\n","from imblearn.over_sampling import ADASYN\n","\n","column_names = ['Age','Sex','L1','L2','L3','L4', 'R1','R2', 'R3','Lf1','Lf2','Lf3']\n","\n","ada = ADASYN()\n","X_res, Y_res = ada.fit_resample(X_train,Y_train)\n","\n","y_res = pd.DataFrame(Y_res, columns=['Diagnosis'])\n","x_res = pd.DataFrame(X_res, columns=column_names)\n","\n","#Resampling caused the 'Sex' data points to contain values between 0 and 1. This function rounds the values\n","def edit_sex(x):\n","  if x >0.5:\n","    x = 1\n","    return x\n","  elif x<0.5:\n","    x=0\n","    return x\n","\n","x_res['Sex'] = x_res['Sex'].apply(edit_sex)\n","\n","#Normalize Data\n","train_stats = x_res.describe()\n","train_stats = train_stats.transpose()\n","\n","x_train_normalized = norm(x_res)\n","x_test_normalized = norm(X_test)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n","  \"(https://pypi.org/project/six/).\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.neighbors.base module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.neighbors. Anything that cannot be imported from sklearn.neighbors is now part of the private API.\n","  warnings.warn(message, FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n","  warnings.warn(msg, category=FutureWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"vYHG0bz-uC3T","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1597692971249,"user_tz":240,"elapsed":232,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"f89cc543-a5e6-4b0c-80ab-c3efb925de77"},"source":["#Check if dataset is balanced\n","unique, count = np.unique(y_res, return_counts=True)\n","y_train_value_count = {k:v for (k,v) in zip(unique,count)}\n","y_train_value_count"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 22963, 1: 22846, 2: 22549}"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"A2E1cyrXuDH0","colab_type":"text"},"source":["The Next Code Cell is Used for Testing Parameters. DO NOT RUN UNLESS YOU ARE TESTING PARAMETERS BECAUSE IT WILL TAKE A LONG TIME!\n"]},{"cell_type":"code","metadata":{"id":"Ft_r3OzK-I8G","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":221},"executionInfo":{"status":"error","timestamp":1597692974225,"user_tz":240,"elapsed":238,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"e955939e-4f5a-4d1a-fa4c-7129cfd20495"},"source":["from sklearn.model_selection import GridSearchCV\n","parameters = [{'min_child_weight': [1], 'max_depth': [11], 'n_estimators': [1000], 'learning_rate': [0.75,1.25,1.5,1.75,2,2.5]}]\n","grid_search = GridSearchCV(estimator = model,param_grid = parameters, scoring = 'accuracy', cv = 10)\n","grid_search = grid_search.fit(x_train_normalized,y_res)\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ebf35acfeb0f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mparameters\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'min_child_weight'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'max_depth'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m11\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'n_estimators'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'learning_rate'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0.75\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1.25\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1.5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1.75\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2.5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mgrid_search\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mparam_grid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'accuracy'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mgrid_search\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrid_search\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train_normalized\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_res\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}]},{"cell_type":"code","metadata":{"id":"aoxKwsTYeiOQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":88},"executionInfo":{"status":"ok","timestamp":1595623062727,"user_tz":240,"elapsed":329,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"5a56f5a1-890d-44bb-d316-fc9d2ff20de2"},"source":["grid_search.best_params_\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'learning_rate': 0.75,\n"," 'max_depth': 11,\n"," 'min_child_weight': 1,\n"," 'n_estimators': 1000}"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"RaCfVsPqteKl","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":232},"executionInfo":{"status":"ok","timestamp":1597693387919,"user_tz":240,"elapsed":367921,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"0cebe469-e606-4bc4-f21f-63d5abb68c5e"},"source":["#Run Model with optimized parameters\n","model = XGBClassifier(silent=0,learning_rate=1.25, min_child_weight=1, max_depth=11, n_estimators=1000)\n","model.fit(x_train_normalized,y_res)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","              colsample_bynode=1, colsample_bytree=1, gamma=0,\n","              learning_rate=1.25, max_delta_step=0, max_depth=11,\n","              min_child_weight=1, missing=None, n_estimators=1000, n_jobs=1,\n","              nthread=None, objective='multi:softprob', random_state=0,\n","              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n","              silent=0, subsample=1, verbosity=1)"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"SaaYn_Wdt07b","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1597693435714,"user_tz":240,"elapsed":772,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"e3e1fcb0-959a-4589-e41d-7617e0b7a66a"},"source":["#Display Accuracy\n","pred=model.predict(x_test_normalized)\n","accuracy_score(Y_test.to_numpy(),pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.918"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"qtHI9BVNuG7R","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1597693439513,"user_tz":240,"elapsed":274,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"b4e40026-dd3f-4283-cc3f-20ad99d17e13"},"source":["#Print Confusion Matrix\n","confusion_matrix(Y_test.to_numpy(),pred, labels=[0,1,2])\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 240,   25,    0],\n","       [  29, 1125,   42],\n","       [   0,   27,   12]])"]},"metadata":{"tags":[]},"execution_count":9}]}]}