{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"BMD v2.0: Neural Network","provenance":[],"authorship_tag":"ABX9TyNsLm3oFiBask2HfExz7I2h"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"Ff0IsEm_1yao","colab_type":"code","colab":{}},"source":["%tensorflow_version 2.x\n","from __future__ import absolute_import, division, print_function, unicode_literals\n","\n","\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","from tensorflow.keras import layers, metrics\n","from matplotlib import pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn import metrics\n","\n","\n","# The following lines adjust the granularity of reporting. \n","pd.options.display.max_rows = 10\n","pd.options.display.float_format = \"{:.1f}\".format\n","\n","# The following line improves formatting when ouputting NumPy arrays.\n","np.set_printoptions(linewidth = 200)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uMhkUuhL2HgV","colab_type":"code","colab":{}},"source":["column_names = ['Diagnosis','Age','Sex','L1','L2','L3','L4', 'R1','R2', 'R3','Lf1','Lf2','Lf3']\n","\n","#Read files using pandas\n","raw_dataset = pd.read_csv(\"training.csv\", names=column_names, na_values = \"?\", comment='\\t', sep=\",\", skipinitialspace=True)\n","#shuffled_train_df = raw_dataset.reindex(np.random.permutation(raw_dataset))\n","\n","\n","target = 'Diagnosis'\n","X = raw_dataset.loc[:, raw_dataset.columns!= target]\n","Y = raw_dataset.loc[:, raw_dataset.columns==target]\n","\n","#Dataset split into test and train sets with 15% of the data becoming the test set\n","X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.15, random_state = 0)\n","\n","train_stats = X_train.describe()\n","train_stats = train_stats.transpose()\n","\n","#Same Normalization function as previous model\n","def norm(x):\n","  return (x - train_stats['mean']) / train_stats['std']\n","\n","x_train_normalized = norm(X_train)\n","x_test_normalized = norm(X_test)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1zZ9h7_j1rpL","colab_type":"code","colab":{}},"source":["def create_model(my_learning_rate, my_metrics):\n","  \"\"\"Create and compile a deep neural net.\"\"\"\n","  \n","  # All models in this course are sequential.\n","  model = tf.keras.models.Sequential()\n","\n","\n","  # Define hidden layers.   \n","  model.add(tf.keras.layers.Dense(units=128, activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.01)))\n","  model.add(tf.keras.layers.Dense(units=128, activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.01)))\n","  model.add(tf.keras.layers.Dense(units = 64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01)))\n","\n","\n","  # Define a dropout regularization layer. \n","  model.add(tf.keras.layers.Dropout(rate=0.5))\n","\n","\n","  model.add(tf.keras.layers.Dense(units=3, activation='softmax'))     \n","                           \n"," \n","  model.compile(optimizer=tf.keras.optimizers.Adam(lr=my_learning_rate),\n","                loss=\"sparse_categorical_crossentropy\",\n","                metrics=my_metrics)\n","  \n","  return model    \n","\n","\n","def train_model(model, train_features, train_label, epochs,\n","                batch_size=None, validation_split=0.1):\n","  \"\"\"Train the model by feeding it data.\"\"\"\n","\n","  history = model.fit(x=train_features, y=train_label, batch_size=batch_size,\n","                      epochs=epochs, shuffle=True, \n","                      validation_split=validation_split)\n"," \n","  # To track the progression of training, gather a snapshot\n","  # of the model's metrics at each epoch. \n","  epochs = history.epoch\n","  hist = pd.DataFrame(history.history)\n","\n","  return epochs, hist    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jv4Zzuz--PhC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1597688870608,"user_tz":240,"elapsed":395,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"f75d3bcb-1c5b-488b-cf86-a40253038d6c"},"source":["\n","def plot_curve(epochs, hist, list_of_metrics,title):\n","\n","\n","  plt.figure()\n","  plt.title(title)\n","  plt.xlabel(\"Epoch\")\n","  plt.ylabel(\"Value\")\n","\n","  for m in list_of_metrics:\n","    x = hist[m]\n","    plt.plot(epochs[1:], x[1:], label=m)\n","\n","  plt.legend()\n","\n","print(\"Loaded the plot_curve function.\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Loaded the plot_curve function.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2Mt2mZ8u2Ap2","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1597688907303,"user_tz":240,"elapsed":28521,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"293ad8e2-4149-41aa-c484-189602f6eb52"},"source":["# This first model is to test how well it runs with the original imbalanced dataset\n","learning_rate = 0.003\n","epochs = 100\n","batch_size = 300\n","validation_split = 0.2\n","my_metrics = ['accuracy']\n","\n","# Establish the model's topography.\n","my_model = create_model(learning_rate, my_metrics)\n","\n","# Train the model on the normalized training set.\n","epochs, hist = train_model(my_model, x_train_normalized, Y_train, \n","                           epochs, batch_size, validation_split)\n","\n","# Plot a graph of the metric vs. epochs.\n","list_of_metrics_to_plot = ['accuracy','val_accuracy']\n","plot_curve(epochs, hist, list_of_metrics_to_plot, 'Accuracy')\n","list_of_metrics_to_plot = ['loss','val_loss']\n","plot_curve(epochs, hist, list_of_metrics_to_plot, 'Loss')\n","\n","# Evaluate against the test set.\n","print(\"\\n Evaluate the new model against the test set:\")\n","my_model.evaluate(x=x_test_normalized, y=Y_test, batch_size=batch_size)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/100\n","WARNING:tensorflow:Layer dense is casting an input tensor from dtype float64 to the layer's dtype of float32, which is new behavior in TensorFlow 2.  The layer has dtype float32 because its dtype defaults to floatx.\n","\n","If you intended to run this layer in float32, you can safely ignore this warning. If in doubt, this warning is likely only an issue if you are porting a TensorFlow 1.X model to TensorFlow 2.\n","\n","To change all layers to have dtype float64 by default, call `tf.keras.backend.set_floatx('float64')`. To change just this layer, pass dtype='float64' to the layer constructor. If you are the author of this layer, you can disable autocasting by passing autocast=False to the base Layer constructor.\n","\n","61/61 [==============================] - 0s 7ms/step - loss: 1.4744 - accuracy: 0.7930 - val_loss: 0.6678 - val_accuracy: 0.8099\n","Epoch 2/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.5920 - accuracy: 0.8152 - val_loss: 0.5269 - val_accuracy: 0.8311\n","Epoch 3/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.5293 - accuracy: 0.8315 - val_loss: 0.4968 - val_accuracy: 0.8441\n","Epoch 4/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.5042 - accuracy: 0.8440 - val_loss: 0.4842 - val_accuracy: 0.8463\n","Epoch 5/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.4941 - accuracy: 0.8447 - val_loss: 0.4752 - val_accuracy: 0.8712\n","Epoch 6/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.4792 - accuracy: 0.8550 - val_loss: 0.4588 - val_accuracy: 0.8620\n","Epoch 7/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.4614 - accuracy: 0.8645 - val_loss: 0.4455 - val_accuracy: 0.8677\n","Epoch 8/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.4554 - accuracy: 0.8661 - val_loss: 0.4314 - val_accuracy: 0.8816\n","Epoch 9/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.4365 - accuracy: 0.8817 - val_loss: 0.4336 - val_accuracy: 0.8743\n","Epoch 10/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.4247 - accuracy: 0.8866 - val_loss: 0.4123 - val_accuracy: 0.8928\n","Epoch 11/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.4149 - accuracy: 0.8923 - val_loss: 0.3982 - val_accuracy: 0.9012\n","Epoch 12/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.4059 - accuracy: 0.8946 - val_loss: 0.3912 - val_accuracy: 0.9047\n","Epoch 13/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.4027 - accuracy: 0.8969 - val_loss: 0.3876 - val_accuracy: 0.9092\n","Epoch 14/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3941 - accuracy: 0.9024 - val_loss: 0.3851 - val_accuracy: 0.9034\n","Epoch 15/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3903 - accuracy: 0.9059 - val_loss: 0.3774 - val_accuracy: 0.9039\n","Epoch 16/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3888 - accuracy: 0.9017 - val_loss: 0.3816 - val_accuracy: 0.9017\n","Epoch 17/100\n","61/61 [==============================] - 0s 5ms/step - loss: 0.3840 - accuracy: 0.9048 - val_loss: 0.3772 - val_accuracy: 0.9085\n","Epoch 18/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3751 - accuracy: 0.9088 - val_loss: 0.3652 - val_accuracy: 0.9133\n","Epoch 19/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3756 - accuracy: 0.9090 - val_loss: 0.3884 - val_accuracy: 0.8966\n","Epoch 20/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3749 - accuracy: 0.9056 - val_loss: 0.3574 - val_accuracy: 0.9217\n","Epoch 21/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3724 - accuracy: 0.9077 - val_loss: 0.3596 - val_accuracy: 0.9169\n","Epoch 22/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3662 - accuracy: 0.9113 - val_loss: 0.3721 - val_accuracy: 0.9050\n","Epoch 23/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3621 - accuracy: 0.9112 - val_loss: 0.3905 - val_accuracy: 0.8959\n","Epoch 24/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3619 - accuracy: 0.9107 - val_loss: 0.3521 - val_accuracy: 0.9158\n","Epoch 25/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3522 - accuracy: 0.9169 - val_loss: 0.3528 - val_accuracy: 0.9122\n","Epoch 26/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3526 - accuracy: 0.9159 - val_loss: 0.3499 - val_accuracy: 0.9111\n","Epoch 27/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3596 - accuracy: 0.9096 - val_loss: 0.3400 - val_accuracy: 0.9217\n","Epoch 28/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3452 - accuracy: 0.9172 - val_loss: 0.3518 - val_accuracy: 0.9122\n","Epoch 29/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3495 - accuracy: 0.9156 - val_loss: 0.3531 - val_accuracy: 0.9127\n","Epoch 30/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3462 - accuracy: 0.9171 - val_loss: 0.3382 - val_accuracy: 0.9184\n","Epoch 31/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3482 - accuracy: 0.9153 - val_loss: 0.3417 - val_accuracy: 0.9155\n","Epoch 32/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3431 - accuracy: 0.9178 - val_loss: 0.3378 - val_accuracy: 0.9169\n","Epoch 33/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3367 - accuracy: 0.9204 - val_loss: 0.3397 - val_accuracy: 0.9138\n","Epoch 34/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3372 - accuracy: 0.9192 - val_loss: 0.3350 - val_accuracy: 0.9182\n","Epoch 35/100\n","61/61 [==============================] - 0s 5ms/step - loss: 0.3347 - accuracy: 0.9212 - val_loss: 0.3313 - val_accuracy: 0.9222\n","Epoch 36/100\n","61/61 [==============================] - 0s 5ms/step - loss: 0.3385 - accuracy: 0.9150 - val_loss: 0.3389 - val_accuracy: 0.9149\n","Epoch 37/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3345 - accuracy: 0.9159 - val_loss: 0.3317 - val_accuracy: 0.9200\n","Epoch 38/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3295 - accuracy: 0.9225 - val_loss: 0.3255 - val_accuracy: 0.9215\n","Epoch 39/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3333 - accuracy: 0.9172 - val_loss: 0.3342 - val_accuracy: 0.9186\n","Epoch 40/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3281 - accuracy: 0.9220 - val_loss: 0.3353 - val_accuracy: 0.9127\n","Epoch 41/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3251 - accuracy: 0.9203 - val_loss: 0.3240 - val_accuracy: 0.9228\n","Epoch 42/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3247 - accuracy: 0.9223 - val_loss: 0.3180 - val_accuracy: 0.9241\n","Epoch 43/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3258 - accuracy: 0.9197 - val_loss: 0.3295 - val_accuracy: 0.9153\n","Epoch 44/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3238 - accuracy: 0.9209 - val_loss: 0.3316 - val_accuracy: 0.9158\n","Epoch 45/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3305 - accuracy: 0.9162 - val_loss: 0.3241 - val_accuracy: 0.9230\n","Epoch 46/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3225 - accuracy: 0.9201 - val_loss: 0.3151 - val_accuracy: 0.9266\n","Epoch 47/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3197 - accuracy: 0.9225 - val_loss: 0.3154 - val_accuracy: 0.9261\n","Epoch 48/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3204 - accuracy: 0.9207 - val_loss: 0.3244 - val_accuracy: 0.9208\n","Epoch 49/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3185 - accuracy: 0.9232 - val_loss: 0.3131 - val_accuracy: 0.9270\n","Epoch 50/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3150 - accuracy: 0.9229 - val_loss: 0.3269 - val_accuracy: 0.9195\n","Epoch 51/100\n","61/61 [==============================] - 0s 5ms/step - loss: 0.3224 - accuracy: 0.9197 - val_loss: 0.3093 - val_accuracy: 0.9259\n","Epoch 52/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3172 - accuracy: 0.9214 - val_loss: 0.3252 - val_accuracy: 0.9140\n","Epoch 53/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3140 - accuracy: 0.9234 - val_loss: 0.3156 - val_accuracy: 0.9250\n","Epoch 54/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3132 - accuracy: 0.9250 - val_loss: 0.3068 - val_accuracy: 0.9281\n","Epoch 55/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3105 - accuracy: 0.9246 - val_loss: 0.3200 - val_accuracy: 0.9211\n","Epoch 56/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3099 - accuracy: 0.9267 - val_loss: 0.3138 - val_accuracy: 0.9204\n","Epoch 57/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3068 - accuracy: 0.9272 - val_loss: 0.3190 - val_accuracy: 0.9224\n","Epoch 58/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3079 - accuracy: 0.9255 - val_loss: 0.3065 - val_accuracy: 0.9244\n","Epoch 59/100\n","61/61 [==============================] - 0s 5ms/step - loss: 0.3059 - accuracy: 0.9247 - val_loss: 0.3212 - val_accuracy: 0.9182\n","Epoch 60/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3068 - accuracy: 0.9262 - val_loss: 0.3063 - val_accuracy: 0.9266\n","Epoch 61/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3048 - accuracy: 0.9264 - val_loss: 0.3054 - val_accuracy: 0.9268\n","Epoch 62/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3039 - accuracy: 0.9271 - val_loss: 0.3035 - val_accuracy: 0.9241\n","Epoch 63/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3035 - accuracy: 0.9270 - val_loss: 0.3054 - val_accuracy: 0.9237\n","Epoch 64/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3130 - accuracy: 0.9184 - val_loss: 0.3046 - val_accuracy: 0.9244\n","Epoch 65/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3007 - accuracy: 0.9264 - val_loss: 0.3074 - val_accuracy: 0.9222\n","Epoch 66/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2999 - accuracy: 0.9253 - val_loss: 0.3074 - val_accuracy: 0.9200\n","Epoch 67/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2998 - accuracy: 0.9273 - val_loss: 0.3021 - val_accuracy: 0.9239\n","Epoch 68/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2984 - accuracy: 0.9267 - val_loss: 0.3022 - val_accuracy: 0.9257\n","Epoch 69/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.3001 - accuracy: 0.9233 - val_loss: 0.3037 - val_accuracy: 0.9213\n","Epoch 70/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2972 - accuracy: 0.9274 - val_loss: 0.3013 - val_accuracy: 0.9257\n","Epoch 71/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2987 - accuracy: 0.9258 - val_loss: 0.2992 - val_accuracy: 0.9270\n","Epoch 72/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2983 - accuracy: 0.9277 - val_loss: 0.2955 - val_accuracy: 0.9252\n","Epoch 73/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2971 - accuracy: 0.9267 - val_loss: 0.3079 - val_accuracy: 0.9228\n","Epoch 74/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2977 - accuracy: 0.9241 - val_loss: 0.2971 - val_accuracy: 0.9250\n","Epoch 75/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2957 - accuracy: 0.9269 - val_loss: 0.2921 - val_accuracy: 0.9308\n","Epoch 76/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2953 - accuracy: 0.9277 - val_loss: 0.2896 - val_accuracy: 0.9334\n","Epoch 77/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2960 - accuracy: 0.9277 - val_loss: 0.3109 - val_accuracy: 0.9162\n","Epoch 78/100\n","61/61 [==============================] - 0s 5ms/step - loss: 0.2959 - accuracy: 0.9278 - val_loss: 0.2935 - val_accuracy: 0.9250\n","Epoch 79/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2938 - accuracy: 0.9289 - val_loss: 0.2938 - val_accuracy: 0.9281\n","Epoch 80/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2938 - accuracy: 0.9267 - val_loss: 0.3059 - val_accuracy: 0.9246\n","Epoch 81/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2905 - accuracy: 0.9284 - val_loss: 0.2864 - val_accuracy: 0.9332\n","Epoch 82/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2900 - accuracy: 0.9277 - val_loss: 0.3017 - val_accuracy: 0.9219\n","Epoch 83/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2918 - accuracy: 0.9276 - val_loss: 0.2907 - val_accuracy: 0.9308\n","Epoch 84/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2899 - accuracy: 0.9283 - val_loss: 0.2945 - val_accuracy: 0.9237\n","Epoch 85/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2904 - accuracy: 0.9283 - val_loss: 0.2906 - val_accuracy: 0.9272\n","Epoch 86/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2975 - accuracy: 0.9242 - val_loss: 0.2991 - val_accuracy: 0.9215\n","Epoch 87/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2873 - accuracy: 0.9267 - val_loss: 0.2852 - val_accuracy: 0.9341\n","Epoch 88/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2842 - accuracy: 0.9301 - val_loss: 0.2960 - val_accuracy: 0.9226\n","Epoch 89/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2898 - accuracy: 0.9295 - val_loss: 0.2810 - val_accuracy: 0.9314\n","Epoch 90/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2888 - accuracy: 0.9280 - val_loss: 0.2934 - val_accuracy: 0.9252\n","Epoch 91/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2865 - accuracy: 0.9284 - val_loss: 0.2928 - val_accuracy: 0.9235\n","Epoch 92/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2859 - accuracy: 0.9266 - val_loss: 0.2900 - val_accuracy: 0.9261\n","Epoch 93/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2836 - accuracy: 0.9278 - val_loss: 0.2931 - val_accuracy: 0.9264\n","Epoch 94/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2920 - accuracy: 0.9270 - val_loss: 0.2843 - val_accuracy: 0.9277\n","Epoch 95/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2862 - accuracy: 0.9274 - val_loss: 0.3026 - val_accuracy: 0.9219\n","Epoch 96/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2901 - accuracy: 0.9245 - val_loss: 0.2911 - val_accuracy: 0.9239\n","Epoch 97/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2824 - accuracy: 0.9300 - val_loss: 0.3009 - val_accuracy: 0.9224\n","Epoch 98/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2826 - accuracy: 0.9304 - val_loss: 0.2887 - val_accuracy: 0.9279\n","Epoch 99/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2822 - accuracy: 0.9294 - val_loss: 0.2897 - val_accuracy: 0.9270\n","Epoch 100/100\n","61/61 [==============================] - 0s 4ms/step - loss: 0.2845 - accuracy: 0.9285 - val_loss: 0.2872 - val_accuracy: 0.9286\n","\n"," Evaluate the new model against the test set:\n","14/14 [==============================] - 0s 2ms/step - loss: nan - accuracy: 0.9335\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[nan, 0.933533251285553]"]},"metadata":{"tags":[]},"execution_count":5},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"j7to4Cq09dqa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1597689001693,"user_tz":240,"elapsed":6331,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"fe0f3d3b-d22b-4bec-9aff-22c044d2e468"},"source":["!pip install -q pycm\n","from pycm import ConfusionMatrix\n","yhat_classes = my_model.predict_classes(x_test_normalized, verbose = 0)\n","cm = ConfusionMatrix(actual_vector=Y_test.to_numpy(), predict_vector=yhat_classes)\n","print(cm)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 61kB 1.8MB/s \n","\u001b[K     |████████████████████████████████| 552kB 7.2MB/s \n","\u001b[?25hWARNING:tensorflow:From <ipython-input-6-0318a38d5bfa>:3: Sequential.predict_classes (from tensorflow.python.keras.engine.sequential) is deprecated and will be removed after 2021-01-01.\n","Instructions for updating:\n","Please use instead:* `np.argmax(model.predict(x), axis=-1)`,   if your model does multi-class classification   (e.g. if it uses a `softmax` last-layer activation).* `(model.predict(x) > 0.5).astype(\"int32\")`,   if your model does binary classification   (e.g. if it uses a `sigmoid` last-layer activation).\n","Predict    0          1          [0]        [1]        [2]        \n","Actual\n","0          0          0          0          0          0          \n","\n","1          0          0          0          0          0          \n","\n","[0]        595        105        0          0          0          \n","\n","[1]        67         3141       0          0          0          \n","\n","[2]        0          94         0          0          0          \n","\n","\n","\n","\n","\n","Overall Statistics : \n","\n","95% CI                                                            (0.0,0.0)\n","ACC Macro                                                         0.6\n","ARI                                                               0.71967\n","AUNP                                                              None\n","AUNU                                                              None\n","Bangdiwala B                                                      None\n","Bennett S                                                         -0.25\n","CBA                                                               0.0\n","CSI                                                               None\n","Chi-Squared                                                       None\n","Chi-Squared DF                                                    16\n","Conditional Entropy                                               0.22401\n","Cramer V                                                          None\n","Cross Entropy                                                     0\n","F1 Macro                                                          0.0\n","F1 Micro                                                          0.0\n","FNR Macro                                                         None\n","FNR Micro                                                         1.0\n","FPR Macro                                                         0.2\n","FPR Micro                                                         0.25\n","Gwet AC1                                                          -0.19424\n","Hamming Loss                                                      1.0\n","Joint Entropy                                                     1.04683\n","KL Divergence                                                     None\n","Kappa                                                             0.0\n","Kappa 95% CI                                                      (0.0,0.0)\n","Kappa No Prevalence                                               -1.0\n","Kappa Standard Error                                              0.0\n","Kappa Unbiased                                                    -0.53704\n","Krippendorff Alpha                                                -0.53685\n","Lambda A                                                          0.66499\n","Lambda B                                                          0.74018\n","Mutual Information                                                0.4231\n","NIR                                                               0.8016\n","Overall ACC                                                       0.0\n","Overall CEN                                                       0.10395\n","Overall J                                                         (0.0,0.0)\n","Overall MCC                                                       0.0\n","Overall MCEN                                                      0.10395\n","Overall RACC                                                      0.0\n","Overall RACCU                                                     0.3494\n","P-Value                                                           1\n","PPV Macro                                                         None\n","PPV Micro                                                         0.0\n","Pearson C                                                         None\n","Phi-Squared                                                       None\n","RCI                                                               0.51421\n","RR                                                                800.4\n","Reference Entropy                                                 0.82282\n","Response Entropy                                                  0.64711\n","SOA1(Landis & Koch)                                               Slight\n","SOA2(Fleiss)                                                      Poor\n","SOA3(Altman)                                                      Poor\n","SOA4(Cicchetti)                                                   Poor\n","SOA5(Cramer)                                                      None\n","SOA6(Matthews)                                                    Negligible\n","Scott PI                                                          -0.53704\n","Standard Error                                                    0.0\n","TNR Macro                                                         0.8\n","TNR Micro                                                         0.75\n","TPR Macro                                                         None\n","TPR Micro                                                         0.0\n","Zero-one Loss                                                     4002\n","\n","Class Statistics :\n","\n","Classes                                                           0             1             [0]           [1]           [2]           \n","ACC(Accuracy)                                                     0.83458       0.16542       0.82509       0.1984        0.97651       \n","AGF(Adjusted F-score)                                             0.0           0.0           0.0           0.0           0.0           \n","AGM(Adjusted geometric mean)                                      None          None          0             0             0             \n","AM(Difference between automatic and manual classification)        662           3340          -700          -3208         -94           \n","AUC(Area under the ROC curve)                                     None          None          0.5           0.5           0.5           \n","AUCI(AUC value interpretation)                                    None          None          Poor          Poor          Poor          \n","AUPR(Area under the PR curve)                                     None          None          None          None          None          \n","BCD(Bray-Curtis dissimilarity)                                    0.08271       0.41729       0.08746       0.4008        0.01174       \n","BM(Informedness or bookmaker informedness)                        None          None          0.0           0.0           0.0           \n","CEN(Confusion entropy)                                            0.1576        0.12841       0.20328       0.04879       0.0           \n","DOR(Diagnostic odds ratio)                                        None          None          None          None          None          \n","DP(Discriminant power)                                            None          None          None          None          None          \n","DPI(Discriminant power interpretation)                            None          None          None          None          None          \n","ERR(Error rate)                                                   0.16542       0.83458       0.17491       0.8016        0.02349       \n","F0.5(F0.5 score)                                                  0.0           0.0           0.0           0.0           0.0           \n","F1(F1 score - harmonic mean of precision and sensitivity)         0.0           0.0           0.0           0.0           0.0           \n","F2(F2 score)                                                      0.0           0.0           0.0           0.0           0.0           \n","FDR(False discovery rate)                                         1.0           1.0           None          None          None          \n","FN(False negative/miss/type 2 error)                              0             0             700           3208          94            \n","FNR(Miss rate or false negative rate)                             None          None          1.0           1.0           1.0           \n","FOR(False omission rate)                                          0.0           0.0           0.17491       0.8016        0.02349       \n","FP(False positive/type 1 error/false alarm)                       662           3340          0             0             0             \n","FPR(Fall-out or false positive rate)                              0.16542       0.83458       0.0           0.0           0.0           \n","G(G-measure geometric mean of precision and sensitivity)          None          None          None          None          None          \n","GI(Gini index)                                                    None          None          0.0           0.0           0.0           \n","GM(G-mean geometric mean of specificity and sensitivity)          None          None          0.0           0.0           0.0           \n","IBA(Index of balanced accuracy)                                   None          None          0.0           0.0           0.0           \n","ICSI(Individual classification success index)                     None          None          None          None          None          \n","IS(Information score)                                             None          None          None          None          None          \n","J(Jaccard index)                                                  0.0           0.0           0.0           0.0           0.0           \n","LS(Lift score)                                                    None          None          None          None          None          \n","MCC(Matthews correlation coefficient)                             None          None          None          None          None          \n","MCCI(Matthews correlation coefficient interpretation)             None          None          None          None          None          \n","MCEN(Modified confusion entropy)                                  0.1576        0.12841       0.20328       0.04879       0.0           \n","MK(Markedness)                                                    0.0           0.0           None          None          None          \n","N(Condition negative)                                             4002          4002          3302          794           3908          \n","NLR(Negative likelihood ratio)                                    None          None          1.0           1.0           1.0           \n","NLRI(Negative likelihood ratio interpretation)                    None          None          Negligible    Negligible    Negligible    \n","NPV(Negative predictive value)                                    1.0           1.0           0.82509       0.1984        0.97651       \n","OC(Overlap coefficient)                                           None          None          None          None          None          \n","OOC(Otsuka-Ochiai coefficient)                                    None          None          None          None          None          \n","OP(Optimized precision)                                           None          None          -0.17491      -0.8016       -0.02349      \n","P(Condition positive or support)                                  0             0             700           3208          94            \n","PLR(Positive likelihood ratio)                                    None          None          None          None          None          \n","PLRI(Positive likelihood ratio interpretation)                    None          None          None          None          None          \n","POP(Population)                                                   4002          4002          4002          4002          4002          \n","PPV(Precision or positive predictive value)                       0.0           0.0           None          None          None          \n","PRE(Prevalence)                                                   0.0           0.0           0.17491       0.8016        0.02349       \n","Q(Yule Q - coefficient of colligation)                            None          None          None          None          None          \n","QI(Yule Q interpretation)                                         None          None          None          None          None          \n","RACC(Random accuracy)                                             0.0           0.0           0.0           0.0           0.0           \n","RACCU(Random accuracy unbiased)                                   0.00684       0.17413       0.00765       0.16064       0.00014       \n","TN(True negative/correct rejection)                               3340          662           3302          794           3908          \n","TNR(Specificity or true negative rate)                            0.83458       0.16542       1.0           1.0           1.0           \n","TON(Test outcome negative)                                        3340          662           4002          4002          4002          \n","TOP(Test outcome positive)                                        662           3340          0             0             0             \n","TP(True positive/hit)                                             0             0             0             0             0             \n","TPR(Sensitivity, recall, hit rate, or true positive rate)         None          None          0.0           0.0           0.0           \n","Y(Youden index)                                                   None          None          0.0           0.0           0.0           \n","dInd(Distance index)                                              None          None          1.0           1.0           1.0           \n","sInd(Similarity index)                                            None          None          0.29289       0.29289       0.29289       \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"C0v2m87vXQRI","colab_type":"code","colab":{}},"source":["column_names = ['Diagnosis','Age','Sex','L1','L2','L3','L4', 'R1','R2', 'R3','Lf1','Lf2','Lf3']\n","\n","#Read files using pandas\n","raw_dataset = pd.read_csv(\"training.csv\", names=column_names, na_values = \"?\", comment='\\t', sep=\",\", skipinitialspace=True)\n","#shuffled_train_df = raw_dataset.reindex(np.random.permutation(raw_dataset))\n","\n","\n","target = 'Diagnosis'\n","X = raw_dataset.loc[:, raw_dataset.columns!= target]\n","Y = raw_dataset.loc[:, raw_dataset.columns==target]\n","\n","\n","X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.03, random_state = 0)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zotxbaffYa6_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":144},"executionInfo":{"status":"ok","timestamp":1597689107043,"user_tz":240,"elapsed":1021,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"e02a6654-5d44-4f9b-d95c-29ddcbbd5043"},"source":["#Resampling using ADASYN oversampling technique\n","\n","from imblearn.over_sampling import ADASYN\n","\n","column_names = ['Age','Sex','L1','L2','L3','L4', 'R1','R2', 'R3','Lf1','Lf2','Lf3']\n","\n","ada = ADASYN()\n","X_res, Y_res = ada.fit_resample(X_train,Y_train)\n","\n","y_res = pd.DataFrame(Y_res, columns=['Diagnosis'])\n","x_res = pd.DataFrame(X_res, columns=column_names)\n","\n","#Resampling caused the 'Sex' data points to contain values between 0 and 1. This function rounds the values to either or\n","def edit_sex(x):\n","  if x >0.5:\n","    x = 1\n","    return x\n","  elif x<0.5:\n","    x=0\n","    return x\n","\n","x_res['Sex'] = x_res['Sex'].apply(edit_sex)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n","  warnings.warn(msg, category=FutureWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"_Fec5WnHCRCQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1597689108483,"user_tz":240,"elapsed":437,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"e6d026c8-bc0e-4c10-8992-8e0bfef19d5f"},"source":["#Shows data has been balanced\n","unique, count = np.unique(y_res, return_counts=True)\n","y_train_value_count = {k:v for (k,v) in zip(unique,count)}\n","y_train_value_count"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 23372, 1: 23321, 2: 23119}"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"-sWMtTo3Ycu0","colab_type":"code","colab":{}},"source":["train_stats = x_res.describe()\n","train_stats = train_stats.transpose()\n","\n","x_train_normalized = norm(x_res)\n","x_test_normalized = norm(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"M_jEytxkLYtc","colab_type":"code","colab":{}},"source":["#Redefined the create_model function and adjusted layers to better run the new resampled data\n","\n","def create_model(my_learning_rate, my_metrics):\n","  \"\"\"Create and compile a deep neural net.\"\"\"\n","  \n","  model = tf.keras.models.Sequential()\n","\n","\n","  # Define hidden layers.   \n","  model.add(tf.keras.layers.Dense(units=256, activation='relu'))\n","  \n","  model.add(tf.keras.layers.Dropout(rate=0.5))\n","\n","  model.add(tf.keras.layers.Dense(units=256, activation='relu'))\n","  model.add(tf.keras.layers.Dense(units=256, activation='relu'))\n","  \n","\n","  # Define a dropout regularization layer. \n","  model.add(tf.keras.layers.Dropout(rate=0.5))\n","\n","\n","  model.add(tf.keras.layers.Dense(units=3, activation='softmax'))     \n","                           \n"," \n","  model.compile(optimizer=tf.keras.optimizers.Adam(lr=my_learning_rate),\n","                loss=\"sparse_categorical_crossentropy\",\n","                metrics=my_metrics)\n","  \n","  return model    \n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nqC_TxiXXjjF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1597689914492,"user_tz":240,"elapsed":784861,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"6b695024-2a97-44f2-e7c2-aa8b92733e57"},"source":["# This second model is to test how well it runs with the new balanced dataset\n","learning_rate = 0.0003\n","epochs = 400\n","batch_size = 1000\n","validation_split = 0.01\n","my_metrics = ['accuracy']\n","\n","# Establish the model's topography.\n","my_model = create_model(learning_rate, my_metrics)\n","\n","# Train the model on the normalized training set.\n","epochs, hist = train_model(my_model, x_train_normalized, y_res, \n","                           epochs, batch_size, validation_split)\n","\n","# Plot a graph of the metric vs. epochs.\n","list_of_metrics_to_plot = ['accuracy','val_accuracy']\n","plot_curve(epochs, hist, list_of_metrics_to_plot, 'Accuracy')\n","list_of_metrics_to_plot = ['loss','val_loss']\n","plot_curve(epochs, hist, list_of_metrics_to_plot, 'Loss')\n","\n","# Evaluate against the test set.\n","print(\"\\n Evaluate the new model against the test set:\")\n","my_model.evaluate(x=x_test_normalized, y=Y_test, batch_size=batch_size)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/400\n","WARNING:tensorflow:Layer dense_4 is casting an input tensor from dtype float64 to the layer's dtype of float32, which is new behavior in TensorFlow 2.  The layer has dtype float32 because its dtype defaults to floatx.\n","\n","If you intended to run this layer in float32, you can safely ignore this warning. If in doubt, this warning is likely only an issue if you are porting a TensorFlow 1.X model to TensorFlow 2.\n","\n","To change all layers to have dtype float64 by default, call `tf.keras.backend.set_floatx('float64')`. To change just this layer, pass dtype='float64' to the layer constructor. If you are the author of this layer, you can disable autocasting by passing autocast=False to the base Layer constructor.\n","\n","70/70 [==============================] - 2s 29ms/step - loss: 1.0115 - accuracy: 0.4599 - val_loss: 0.9206 - val_accuracy: 0.5265\n","Epoch 2/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.8512 - accuracy: 0.5655 - val_loss: 0.7877 - val_accuracy: 0.6266\n","Epoch 3/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.7619 - accuracy: 0.6131 - val_loss: 0.7691 - val_accuracy: 0.5780\n","Epoch 4/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.7187 - accuracy: 0.6363 - val_loss: 0.7256 - val_accuracy: 0.6538\n","Epoch 5/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.6901 - accuracy: 0.6536 - val_loss: 0.7394 - val_accuracy: 0.6567\n","Epoch 6/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.6674 - accuracy: 0.6683 - val_loss: 0.6601 - val_accuracy: 0.7196\n","Epoch 7/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.6466 - accuracy: 0.6842 - val_loss: 0.6741 - val_accuracy: 0.6810\n","Epoch 8/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.6262 - accuracy: 0.6951 - val_loss: 0.6738 - val_accuracy: 0.6495\n","Epoch 9/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.6069 - accuracy: 0.7105 - val_loss: 0.6353 - val_accuracy: 0.6953\n","Epoch 10/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.5835 - accuracy: 0.7238 - val_loss: 0.5445 - val_accuracy: 0.7725\n","Epoch 11/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.5646 - accuracy: 0.7352 - val_loss: 0.5793 - val_accuracy: 0.7339\n","Epoch 12/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.5435 - accuracy: 0.7498 - val_loss: 0.5360 - val_accuracy: 0.7783\n","Epoch 13/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.5266 - accuracy: 0.7615 - val_loss: 0.4856 - val_accuracy: 0.7983\n","Epoch 14/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.5063 - accuracy: 0.7711 - val_loss: 0.4787 - val_accuracy: 0.7940\n","Epoch 15/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.4939 - accuracy: 0.7786 - val_loss: 0.4985 - val_accuracy: 0.7740\n","Epoch 16/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.4821 - accuracy: 0.7833 - val_loss: 0.4499 - val_accuracy: 0.8155\n","Epoch 17/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.4739 - accuracy: 0.7885 - val_loss: 0.4691 - val_accuracy: 0.7854\n","Epoch 18/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.4642 - accuracy: 0.7924 - val_loss: 0.4562 - val_accuracy: 0.8011\n","Epoch 19/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.4517 - accuracy: 0.8012 - val_loss: 0.4456 - val_accuracy: 0.8112\n","Epoch 20/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.4455 - accuracy: 0.8040 - val_loss: 0.4763 - val_accuracy: 0.7854\n","Epoch 21/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.4411 - accuracy: 0.8043 - val_loss: 0.4185 - val_accuracy: 0.8369\n","Epoch 22/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.4329 - accuracy: 0.8089 - val_loss: 0.4315 - val_accuracy: 0.8240\n","Epoch 23/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.4266 - accuracy: 0.8107 - val_loss: 0.4218 - val_accuracy: 0.8269\n","Epoch 24/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.4237 - accuracy: 0.8129 - val_loss: 0.4335 - val_accuracy: 0.8112\n","Epoch 25/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.4191 - accuracy: 0.8149 - val_loss: 0.4381 - val_accuracy: 0.8112\n","Epoch 26/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.4139 - accuracy: 0.8175 - val_loss: 0.4552 - val_accuracy: 0.8011\n","Epoch 27/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.4086 - accuracy: 0.8201 - val_loss: 0.4262 - val_accuracy: 0.8183\n","Epoch 28/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.4050 - accuracy: 0.8218 - val_loss: 0.4082 - val_accuracy: 0.8326\n","Epoch 29/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.4037 - accuracy: 0.8233 - val_loss: 0.4573 - val_accuracy: 0.8069\n","Epoch 30/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.3979 - accuracy: 0.8238 - val_loss: 0.4145 - val_accuracy: 0.8383\n","Epoch 31/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3946 - accuracy: 0.8263 - val_loss: 0.4608 - val_accuracy: 0.8169\n","Epoch 32/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3896 - accuracy: 0.8283 - val_loss: 0.4723 - val_accuracy: 0.7983\n","Epoch 33/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3872 - accuracy: 0.8298 - val_loss: 0.4270 - val_accuracy: 0.8283\n","Epoch 34/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3835 - accuracy: 0.8315 - val_loss: 0.4596 - val_accuracy: 0.8126\n","Epoch 35/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3849 - accuracy: 0.8333 - val_loss: 0.4372 - val_accuracy: 0.8212\n","Epoch 36/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3791 - accuracy: 0.8329 - val_loss: 0.4296 - val_accuracy: 0.8312\n","Epoch 37/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3761 - accuracy: 0.8352 - val_loss: 0.4301 - val_accuracy: 0.8226\n","Epoch 38/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3739 - accuracy: 0.8361 - val_loss: 0.4792 - val_accuracy: 0.7969\n","Epoch 39/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3727 - accuracy: 0.8378 - val_loss: 0.4259 - val_accuracy: 0.8326\n","Epoch 40/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3685 - accuracy: 0.8380 - val_loss: 0.4541 - val_accuracy: 0.8183\n","Epoch 41/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3644 - accuracy: 0.8403 - val_loss: 0.4542 - val_accuracy: 0.8112\n","Epoch 42/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3647 - accuracy: 0.8404 - val_loss: 0.4359 - val_accuracy: 0.8183\n","Epoch 43/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3623 - accuracy: 0.8414 - val_loss: 0.4303 - val_accuracy: 0.8283\n","Epoch 44/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3615 - accuracy: 0.8420 - val_loss: 0.4420 - val_accuracy: 0.8197\n","Epoch 45/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3547 - accuracy: 0.8453 - val_loss: 0.4607 - val_accuracy: 0.8097\n","Epoch 46/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3544 - accuracy: 0.8456 - val_loss: 0.4505 - val_accuracy: 0.8140\n","Epoch 47/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3534 - accuracy: 0.8448 - val_loss: 0.4612 - val_accuracy: 0.8126\n","Epoch 48/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3515 - accuracy: 0.8462 - val_loss: 0.4476 - val_accuracy: 0.8140\n","Epoch 49/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3509 - accuracy: 0.8473 - val_loss: 0.4712 - val_accuracy: 0.7868\n","Epoch 50/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3480 - accuracy: 0.8473 - val_loss: 0.4386 - val_accuracy: 0.8183\n","Epoch 51/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3454 - accuracy: 0.8493 - val_loss: 0.4225 - val_accuracy: 0.8183\n","Epoch 52/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3442 - accuracy: 0.8499 - val_loss: 0.4725 - val_accuracy: 0.7997\n","Epoch 53/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3431 - accuracy: 0.8510 - val_loss: 0.4426 - val_accuracy: 0.8083\n","Epoch 54/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3416 - accuracy: 0.8502 - val_loss: 0.4816 - val_accuracy: 0.7840\n","Epoch 55/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3382 - accuracy: 0.8523 - val_loss: 0.4599 - val_accuracy: 0.7969\n","Epoch 56/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3364 - accuracy: 0.8533 - val_loss: 0.4711 - val_accuracy: 0.7883\n","Epoch 57/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3363 - accuracy: 0.8547 - val_loss: 0.4543 - val_accuracy: 0.8040\n","Epoch 58/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3357 - accuracy: 0.8522 - val_loss: 0.4691 - val_accuracy: 0.7969\n","Epoch 59/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.3306 - accuracy: 0.8562 - val_loss: 0.4782 - val_accuracy: 0.7868\n","Epoch 60/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3314 - accuracy: 0.8563 - val_loss: 0.4445 - val_accuracy: 0.8054\n","Epoch 61/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3310 - accuracy: 0.8563 - val_loss: 0.5220 - val_accuracy: 0.7625\n","Epoch 62/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3258 - accuracy: 0.8593 - val_loss: 0.4601 - val_accuracy: 0.7911\n","Epoch 63/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3245 - accuracy: 0.8597 - val_loss: 0.5069 - val_accuracy: 0.7725\n","Epoch 64/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3234 - accuracy: 0.8604 - val_loss: 0.4951 - val_accuracy: 0.7740\n","Epoch 65/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3221 - accuracy: 0.8606 - val_loss: 0.4911 - val_accuracy: 0.7783\n","Epoch 66/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3221 - accuracy: 0.8605 - val_loss: 0.4838 - val_accuracy: 0.7811\n","Epoch 67/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.3219 - accuracy: 0.8611 - val_loss: 0.5025 - val_accuracy: 0.7697\n","Epoch 68/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3179 - accuracy: 0.8625 - val_loss: 0.4621 - val_accuracy: 0.7883\n","Epoch 69/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.3173 - accuracy: 0.8619 - val_loss: 0.4496 - val_accuracy: 0.8011\n","Epoch 70/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.3146 - accuracy: 0.8636 - val_loss: 0.5093 - val_accuracy: 0.7725\n","Epoch 71/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.3167 - accuracy: 0.8630 - val_loss: 0.4864 - val_accuracy: 0.7711\n","Epoch 72/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.3146 - accuracy: 0.8645 - val_loss: 0.4604 - val_accuracy: 0.7840\n","Epoch 73/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3116 - accuracy: 0.8647 - val_loss: 0.4614 - val_accuracy: 0.7997\n","Epoch 74/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3119 - accuracy: 0.8665 - val_loss: 0.4663 - val_accuracy: 0.7783\n","Epoch 75/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3098 - accuracy: 0.8658 - val_loss: 0.4748 - val_accuracy: 0.7825\n","Epoch 76/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.3087 - accuracy: 0.8664 - val_loss: 0.4486 - val_accuracy: 0.7954\n","Epoch 77/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3054 - accuracy: 0.8695 - val_loss: 0.4722 - val_accuracy: 0.7768\n","Epoch 78/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3066 - accuracy: 0.8674 - val_loss: 0.4839 - val_accuracy: 0.7740\n","Epoch 79/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3030 - accuracy: 0.8695 - val_loss: 0.4678 - val_accuracy: 0.7783\n","Epoch 80/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.3045 - accuracy: 0.8685 - val_loss: 0.4659 - val_accuracy: 0.7854\n","Epoch 81/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.3015 - accuracy: 0.8700 - val_loss: 0.4993 - val_accuracy: 0.7597\n","Epoch 82/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2998 - accuracy: 0.8706 - val_loss: 0.4497 - val_accuracy: 0.7954\n","Epoch 83/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.3004 - accuracy: 0.8708 - val_loss: 0.4538 - val_accuracy: 0.7911\n","Epoch 84/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2998 - accuracy: 0.8703 - val_loss: 0.4579 - val_accuracy: 0.7911\n","Epoch 85/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2956 - accuracy: 0.8722 - val_loss: 0.4558 - val_accuracy: 0.8054\n","Epoch 86/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2984 - accuracy: 0.8719 - val_loss: 0.4730 - val_accuracy: 0.8026\n","Epoch 87/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2982 - accuracy: 0.8723 - val_loss: 0.5262 - val_accuracy: 0.7625\n","Epoch 88/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2959 - accuracy: 0.8731 - val_loss: 0.4976 - val_accuracy: 0.7697\n","Epoch 89/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2926 - accuracy: 0.8742 - val_loss: 0.5146 - val_accuracy: 0.7682\n","Epoch 90/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2932 - accuracy: 0.8750 - val_loss: 0.4780 - val_accuracy: 0.7897\n","Epoch 91/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2927 - accuracy: 0.8743 - val_loss: 0.5376 - val_accuracy: 0.7482\n","Epoch 92/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2921 - accuracy: 0.8758 - val_loss: 0.4949 - val_accuracy: 0.7754\n","Epoch 93/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2879 - accuracy: 0.8771 - val_loss: 0.4758 - val_accuracy: 0.7783\n","Epoch 94/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2875 - accuracy: 0.8776 - val_loss: 0.5040 - val_accuracy: 0.7740\n","Epoch 95/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2859 - accuracy: 0.8792 - val_loss: 0.5414 - val_accuracy: 0.7597\n","Epoch 96/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2886 - accuracy: 0.8772 - val_loss: 0.5063 - val_accuracy: 0.7868\n","Epoch 97/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2889 - accuracy: 0.8763 - val_loss: 0.4693 - val_accuracy: 0.8011\n","Epoch 98/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2863 - accuracy: 0.8767 - val_loss: 0.5224 - val_accuracy: 0.7697\n","Epoch 99/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2862 - accuracy: 0.8794 - val_loss: 0.5426 - val_accuracy: 0.7554\n","Epoch 100/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2848 - accuracy: 0.8785 - val_loss: 0.4937 - val_accuracy: 0.7740\n","Epoch 101/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2839 - accuracy: 0.8797 - val_loss: 0.5421 - val_accuracy: 0.7582\n","Epoch 102/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2828 - accuracy: 0.8799 - val_loss: 0.5321 - val_accuracy: 0.7611\n","Epoch 103/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2812 - accuracy: 0.8807 - val_loss: 0.4865 - val_accuracy: 0.7911\n","Epoch 104/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2820 - accuracy: 0.8805 - val_loss: 0.5213 - val_accuracy: 0.7639\n","Epoch 105/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2806 - accuracy: 0.8806 - val_loss: 0.4908 - val_accuracy: 0.7868\n","Epoch 106/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2793 - accuracy: 0.8813 - val_loss: 0.5104 - val_accuracy: 0.7768\n","Epoch 107/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2803 - accuracy: 0.8806 - val_loss: 0.5261 - val_accuracy: 0.7711\n","Epoch 108/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2755 - accuracy: 0.8842 - val_loss: 0.5316 - val_accuracy: 0.7554\n","Epoch 109/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2776 - accuracy: 0.8810 - val_loss: 0.5824 - val_accuracy: 0.7353\n","Epoch 110/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2784 - accuracy: 0.8818 - val_loss: 0.5140 - val_accuracy: 0.7711\n","Epoch 111/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2749 - accuracy: 0.8836 - val_loss: 0.5202 - val_accuracy: 0.7754\n","Epoch 112/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2751 - accuracy: 0.8837 - val_loss: 0.4285 - val_accuracy: 0.8183\n","Epoch 113/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2755 - accuracy: 0.8832 - val_loss: 0.4603 - val_accuracy: 0.8054\n","Epoch 114/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2734 - accuracy: 0.8826 - val_loss: 0.5099 - val_accuracy: 0.7811\n","Epoch 115/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2740 - accuracy: 0.8837 - val_loss: 0.5245 - val_accuracy: 0.7597\n","Epoch 116/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2701 - accuracy: 0.8855 - val_loss: 0.5661 - val_accuracy: 0.7482\n","Epoch 117/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2697 - accuracy: 0.8853 - val_loss: 0.5069 - val_accuracy: 0.7883\n","Epoch 118/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2689 - accuracy: 0.8865 - val_loss: 0.4914 - val_accuracy: 0.7768\n","Epoch 119/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2686 - accuracy: 0.8873 - val_loss: 0.5967 - val_accuracy: 0.7325\n","Epoch 120/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2690 - accuracy: 0.8869 - val_loss: 0.5836 - val_accuracy: 0.7396\n","Epoch 121/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2676 - accuracy: 0.8876 - val_loss: 0.5012 - val_accuracy: 0.7754\n","Epoch 122/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2700 - accuracy: 0.8858 - val_loss: 0.5122 - val_accuracy: 0.7711\n","Epoch 123/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2681 - accuracy: 0.8866 - val_loss: 0.5376 - val_accuracy: 0.7682\n","Epoch 124/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2661 - accuracy: 0.8874 - val_loss: 0.4632 - val_accuracy: 0.8011\n","Epoch 125/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2658 - accuracy: 0.8881 - val_loss: 0.5753 - val_accuracy: 0.7496\n","Epoch 126/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2654 - accuracy: 0.8894 - val_loss: 0.4979 - val_accuracy: 0.7983\n","Epoch 127/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2650 - accuracy: 0.8885 - val_loss: 0.5158 - val_accuracy: 0.7783\n","Epoch 128/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2640 - accuracy: 0.8892 - val_loss: 0.5894 - val_accuracy: 0.7368\n","Epoch 129/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2624 - accuracy: 0.8896 - val_loss: 0.5368 - val_accuracy: 0.7682\n","Epoch 130/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2623 - accuracy: 0.8895 - val_loss: 0.6137 - val_accuracy: 0.7225\n","Epoch 131/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2619 - accuracy: 0.8895 - val_loss: 0.5580 - val_accuracy: 0.7568\n","Epoch 132/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2598 - accuracy: 0.8917 - val_loss: 0.5553 - val_accuracy: 0.7582\n","Epoch 133/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2598 - accuracy: 0.8902 - val_loss: 0.5233 - val_accuracy: 0.7783\n","Epoch 134/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2591 - accuracy: 0.8904 - val_loss: 0.5975 - val_accuracy: 0.7425\n","Epoch 135/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2592 - accuracy: 0.8899 - val_loss: 0.5532 - val_accuracy: 0.7625\n","Epoch 136/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2591 - accuracy: 0.8905 - val_loss: 0.5839 - val_accuracy: 0.7697\n","Epoch 137/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2585 - accuracy: 0.8926 - val_loss: 0.5290 - val_accuracy: 0.7740\n","Epoch 138/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2563 - accuracy: 0.8930 - val_loss: 0.5211 - val_accuracy: 0.7926\n","Epoch 139/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2567 - accuracy: 0.8912 - val_loss: 0.5651 - val_accuracy: 0.7568\n","Epoch 140/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2557 - accuracy: 0.8942 - val_loss: 0.5407 - val_accuracy: 0.7740\n","Epoch 141/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2564 - accuracy: 0.8933 - val_loss: 0.5474 - val_accuracy: 0.7697\n","Epoch 142/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2581 - accuracy: 0.8922 - val_loss: 0.5959 - val_accuracy: 0.7511\n","Epoch 143/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2573 - accuracy: 0.8914 - val_loss: 0.5327 - val_accuracy: 0.7783\n","Epoch 144/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2545 - accuracy: 0.8940 - val_loss: 0.5733 - val_accuracy: 0.7554\n","Epoch 145/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2541 - accuracy: 0.8936 - val_loss: 0.5420 - val_accuracy: 0.7754\n","Epoch 146/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2532 - accuracy: 0.8932 - val_loss: 0.5717 - val_accuracy: 0.7525\n","Epoch 147/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2517 - accuracy: 0.8950 - val_loss: 0.5314 - val_accuracy: 0.7768\n","Epoch 148/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2542 - accuracy: 0.8945 - val_loss: 0.5717 - val_accuracy: 0.7682\n","Epoch 149/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2523 - accuracy: 0.8946 - val_loss: 0.6044 - val_accuracy: 0.7554\n","Epoch 150/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2543 - accuracy: 0.8931 - val_loss: 0.5878 - val_accuracy: 0.7482\n","Epoch 151/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2503 - accuracy: 0.8951 - val_loss: 0.6227 - val_accuracy: 0.7382\n","Epoch 152/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2493 - accuracy: 0.8962 - val_loss: 0.5790 - val_accuracy: 0.7511\n","Epoch 153/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2514 - accuracy: 0.8938 - val_loss: 0.4944 - val_accuracy: 0.7983\n","Epoch 154/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2485 - accuracy: 0.8970 - val_loss: 0.5528 - val_accuracy: 0.7697\n","Epoch 155/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2486 - accuracy: 0.8952 - val_loss: 0.5366 - val_accuracy: 0.7711\n","Epoch 156/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2484 - accuracy: 0.8959 - val_loss: 0.5310 - val_accuracy: 0.7740\n","Epoch 157/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2480 - accuracy: 0.8963 - val_loss: 0.5772 - val_accuracy: 0.7597\n","Epoch 158/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2464 - accuracy: 0.8978 - val_loss: 0.5479 - val_accuracy: 0.7768\n","Epoch 159/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2439 - accuracy: 0.8985 - val_loss: 0.5604 - val_accuracy: 0.7682\n","Epoch 160/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2462 - accuracy: 0.8967 - val_loss: 0.5635 - val_accuracy: 0.7611\n","Epoch 161/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2436 - accuracy: 0.8987 - val_loss: 0.5652 - val_accuracy: 0.7611\n","Epoch 162/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2469 - accuracy: 0.8971 - val_loss: 0.5299 - val_accuracy: 0.7811\n","Epoch 163/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2451 - accuracy: 0.8989 - val_loss: 0.6064 - val_accuracy: 0.7368\n","Epoch 164/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2463 - accuracy: 0.8972 - val_loss: 0.5628 - val_accuracy: 0.7625\n","Epoch 165/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2428 - accuracy: 0.8981 - val_loss: 0.6300 - val_accuracy: 0.7310\n","Epoch 166/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2442 - accuracy: 0.8987 - val_loss: 0.5255 - val_accuracy: 0.7768\n","Epoch 167/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2453 - accuracy: 0.8988 - val_loss: 0.5550 - val_accuracy: 0.7625\n","Epoch 168/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2437 - accuracy: 0.8996 - val_loss: 0.5461 - val_accuracy: 0.7740\n","Epoch 169/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2442 - accuracy: 0.8973 - val_loss: 0.5559 - val_accuracy: 0.7654\n","Epoch 170/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2424 - accuracy: 0.8998 - val_loss: 0.6425 - val_accuracy: 0.7210\n","Epoch 171/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2411 - accuracy: 0.9003 - val_loss: 0.5457 - val_accuracy: 0.7783\n","Epoch 172/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2401 - accuracy: 0.8999 - val_loss: 0.5833 - val_accuracy: 0.7611\n","Epoch 173/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2428 - accuracy: 0.9009 - val_loss: 0.6267 - val_accuracy: 0.7382\n","Epoch 174/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2381 - accuracy: 0.9020 - val_loss: 0.5531 - val_accuracy: 0.7611\n","Epoch 175/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2378 - accuracy: 0.9014 - val_loss: 0.5563 - val_accuracy: 0.7768\n","Epoch 176/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2411 - accuracy: 0.9002 - val_loss: 0.5705 - val_accuracy: 0.7725\n","Epoch 177/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2385 - accuracy: 0.9022 - val_loss: 0.5812 - val_accuracy: 0.7568\n","Epoch 178/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2375 - accuracy: 0.9014 - val_loss: 0.6289 - val_accuracy: 0.7368\n","Epoch 179/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2377 - accuracy: 0.9006 - val_loss: 0.6111 - val_accuracy: 0.7439\n","Epoch 180/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2363 - accuracy: 0.9019 - val_loss: 0.5637 - val_accuracy: 0.7611\n","Epoch 181/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2401 - accuracy: 0.9008 - val_loss: 0.5853 - val_accuracy: 0.7496\n","Epoch 182/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2380 - accuracy: 0.9010 - val_loss: 0.5360 - val_accuracy: 0.7897\n","Epoch 183/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2389 - accuracy: 0.9018 - val_loss: 0.5794 - val_accuracy: 0.7568\n","Epoch 184/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2362 - accuracy: 0.9020 - val_loss: 0.6253 - val_accuracy: 0.7282\n","Epoch 185/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2343 - accuracy: 0.9027 - val_loss: 0.6152 - val_accuracy: 0.7411\n","Epoch 186/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2368 - accuracy: 0.9028 - val_loss: 0.6302 - val_accuracy: 0.7353\n","Epoch 187/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2353 - accuracy: 0.9018 - val_loss: 0.6339 - val_accuracy: 0.7425\n","Epoch 188/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2364 - accuracy: 0.9009 - val_loss: 0.5915 - val_accuracy: 0.7468\n","Epoch 189/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2296 - accuracy: 0.9053 - val_loss: 0.5750 - val_accuracy: 0.7811\n","Epoch 190/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2330 - accuracy: 0.9033 - val_loss: 0.6336 - val_accuracy: 0.7325\n","Epoch 191/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2304 - accuracy: 0.9052 - val_loss: 0.6192 - val_accuracy: 0.7310\n","Epoch 192/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2368 - accuracy: 0.9029 - val_loss: 0.6209 - val_accuracy: 0.7353\n","Epoch 193/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2333 - accuracy: 0.9031 - val_loss: 0.5668 - val_accuracy: 0.7754\n","Epoch 194/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2319 - accuracy: 0.9042 - val_loss: 0.6647 - val_accuracy: 0.7182\n","Epoch 195/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2340 - accuracy: 0.9039 - val_loss: 0.5704 - val_accuracy: 0.7697\n","Epoch 196/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2324 - accuracy: 0.9026 - val_loss: 0.5780 - val_accuracy: 0.7554\n","Epoch 197/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2330 - accuracy: 0.9040 - val_loss: 0.5903 - val_accuracy: 0.7682\n","Epoch 198/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2294 - accuracy: 0.9061 - val_loss: 0.6165 - val_accuracy: 0.7396\n","Epoch 199/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2309 - accuracy: 0.9047 - val_loss: 0.6290 - val_accuracy: 0.7353\n","Epoch 200/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2287 - accuracy: 0.9054 - val_loss: 0.6156 - val_accuracy: 0.7382\n","Epoch 201/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2317 - accuracy: 0.9042 - val_loss: 0.6129 - val_accuracy: 0.7368\n","Epoch 202/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2302 - accuracy: 0.9053 - val_loss: 0.5699 - val_accuracy: 0.7525\n","Epoch 203/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2290 - accuracy: 0.9058 - val_loss: 0.6202 - val_accuracy: 0.7411\n","Epoch 204/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2275 - accuracy: 0.9050 - val_loss: 0.6522 - val_accuracy: 0.7110\n","Epoch 205/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2287 - accuracy: 0.9060 - val_loss: 0.5579 - val_accuracy: 0.7854\n","Epoch 206/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2273 - accuracy: 0.9061 - val_loss: 0.6170 - val_accuracy: 0.7382\n","Epoch 207/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2280 - accuracy: 0.9055 - val_loss: 0.6659 - val_accuracy: 0.7082\n","Epoch 208/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2246 - accuracy: 0.9075 - val_loss: 0.5745 - val_accuracy: 0.7725\n","Epoch 209/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2249 - accuracy: 0.9076 - val_loss: 0.6556 - val_accuracy: 0.7253\n","Epoch 210/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2262 - accuracy: 0.9060 - val_loss: 0.5796 - val_accuracy: 0.7597\n","Epoch 211/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2273 - accuracy: 0.9074 - val_loss: 0.6499 - val_accuracy: 0.7282\n","Epoch 212/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2244 - accuracy: 0.9086 - val_loss: 0.6807 - val_accuracy: 0.7196\n","Epoch 213/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2267 - accuracy: 0.9077 - val_loss: 0.6645 - val_accuracy: 0.7153\n","Epoch 214/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2254 - accuracy: 0.9074 - val_loss: 0.5632 - val_accuracy: 0.7568\n","Epoch 215/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2248 - accuracy: 0.9077 - val_loss: 0.6723 - val_accuracy: 0.7124\n","Epoch 216/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2233 - accuracy: 0.9077 - val_loss: 0.6005 - val_accuracy: 0.7454\n","Epoch 217/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2250 - accuracy: 0.9073 - val_loss: 0.6111 - val_accuracy: 0.7539\n","Epoch 218/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2259 - accuracy: 0.9060 - val_loss: 0.6094 - val_accuracy: 0.7425\n","Epoch 219/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2224 - accuracy: 0.9095 - val_loss: 0.5130 - val_accuracy: 0.7926\n","Epoch 220/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2262 - accuracy: 0.9076 - val_loss: 0.6435 - val_accuracy: 0.7310\n","Epoch 221/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2254 - accuracy: 0.9075 - val_loss: 0.6322 - val_accuracy: 0.7296\n","Epoch 222/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2219 - accuracy: 0.9086 - val_loss: 0.6324 - val_accuracy: 0.7439\n","Epoch 223/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2215 - accuracy: 0.9089 - val_loss: 0.6063 - val_accuracy: 0.7396\n","Epoch 224/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2214 - accuracy: 0.9084 - val_loss: 0.6615 - val_accuracy: 0.7239\n","Epoch 225/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2207 - accuracy: 0.9090 - val_loss: 0.5882 - val_accuracy: 0.7654\n","Epoch 226/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2204 - accuracy: 0.9098 - val_loss: 0.6130 - val_accuracy: 0.7454\n","Epoch 227/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2214 - accuracy: 0.9088 - val_loss: 0.5786 - val_accuracy: 0.7582\n","Epoch 228/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2222 - accuracy: 0.9092 - val_loss: 0.6389 - val_accuracy: 0.7368\n","Epoch 229/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2196 - accuracy: 0.9097 - val_loss: 0.5914 - val_accuracy: 0.7654\n","Epoch 230/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2210 - accuracy: 0.9099 - val_loss: 0.6362 - val_accuracy: 0.7439\n","Epoch 231/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2176 - accuracy: 0.9114 - val_loss: 0.5495 - val_accuracy: 0.7825\n","Epoch 232/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2186 - accuracy: 0.9109 - val_loss: 0.5800 - val_accuracy: 0.7725\n","Epoch 233/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2159 - accuracy: 0.9118 - val_loss: 0.5933 - val_accuracy: 0.7725\n","Epoch 234/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2172 - accuracy: 0.9107 - val_loss: 0.6459 - val_accuracy: 0.7339\n","Epoch 235/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2182 - accuracy: 0.9103 - val_loss: 0.5815 - val_accuracy: 0.7725\n","Epoch 236/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2192 - accuracy: 0.9101 - val_loss: 0.6620 - val_accuracy: 0.7210\n","Epoch 237/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2169 - accuracy: 0.9123 - val_loss: 0.6197 - val_accuracy: 0.7439\n","Epoch 238/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2178 - accuracy: 0.9106 - val_loss: 0.6726 - val_accuracy: 0.7296\n","Epoch 239/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2167 - accuracy: 0.9103 - val_loss: 0.5214 - val_accuracy: 0.7897\n","Epoch 240/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2162 - accuracy: 0.9121 - val_loss: 0.6378 - val_accuracy: 0.7396\n","Epoch 241/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2200 - accuracy: 0.9096 - val_loss: 0.6138 - val_accuracy: 0.7425\n","Epoch 242/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2182 - accuracy: 0.9103 - val_loss: 0.5407 - val_accuracy: 0.7639\n","Epoch 243/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2176 - accuracy: 0.9118 - val_loss: 0.5981 - val_accuracy: 0.7496\n","Epoch 244/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2150 - accuracy: 0.9124 - val_loss: 0.6177 - val_accuracy: 0.7454\n","Epoch 245/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2161 - accuracy: 0.9112 - val_loss: 0.5716 - val_accuracy: 0.7682\n","Epoch 246/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2143 - accuracy: 0.9127 - val_loss: 0.6477 - val_accuracy: 0.7368\n","Epoch 247/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2131 - accuracy: 0.9122 - val_loss: 0.6626 - val_accuracy: 0.7396\n","Epoch 248/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2160 - accuracy: 0.9112 - val_loss: 0.6192 - val_accuracy: 0.7511\n","Epoch 249/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2157 - accuracy: 0.9119 - val_loss: 0.6303 - val_accuracy: 0.7353\n","Epoch 250/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2159 - accuracy: 0.9113 - val_loss: 0.5594 - val_accuracy: 0.7783\n","Epoch 251/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2160 - accuracy: 0.9118 - val_loss: 0.6784 - val_accuracy: 0.7296\n","Epoch 252/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2141 - accuracy: 0.9137 - val_loss: 0.6123 - val_accuracy: 0.7525\n","Epoch 253/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2141 - accuracy: 0.9129 - val_loss: 0.6079 - val_accuracy: 0.7454\n","Epoch 254/400\n","70/70 [==============================] - 2s 29ms/step - loss: 0.2129 - accuracy: 0.9142 - val_loss: 0.6218 - val_accuracy: 0.7511\n","Epoch 255/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2129 - accuracy: 0.9122 - val_loss: 0.6468 - val_accuracy: 0.7396\n","Epoch 256/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2140 - accuracy: 0.9125 - val_loss: 0.6526 - val_accuracy: 0.7425\n","Epoch 257/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2124 - accuracy: 0.9134 - val_loss: 0.5917 - val_accuracy: 0.7711\n","Epoch 258/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2105 - accuracy: 0.9139 - val_loss: 0.6740 - val_accuracy: 0.7139\n","Epoch 259/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2112 - accuracy: 0.9132 - val_loss: 0.6099 - val_accuracy: 0.7554\n","Epoch 260/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2156 - accuracy: 0.9121 - val_loss: 0.6190 - val_accuracy: 0.7511\n","Epoch 261/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2113 - accuracy: 0.9147 - val_loss: 0.5780 - val_accuracy: 0.7682\n","Epoch 262/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2131 - accuracy: 0.9124 - val_loss: 0.5492 - val_accuracy: 0.7783\n","Epoch 263/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2108 - accuracy: 0.9143 - val_loss: 0.6071 - val_accuracy: 0.7654\n","Epoch 264/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2088 - accuracy: 0.9152 - val_loss: 0.5802 - val_accuracy: 0.7811\n","Epoch 265/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2112 - accuracy: 0.9137 - val_loss: 0.5679 - val_accuracy: 0.7668\n","Epoch 266/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2109 - accuracy: 0.9154 - val_loss: 0.6226 - val_accuracy: 0.7597\n","Epoch 267/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2117 - accuracy: 0.9141 - val_loss: 0.5924 - val_accuracy: 0.7768\n","Epoch 268/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2059 - accuracy: 0.9147 - val_loss: 0.6188 - val_accuracy: 0.7554\n","Epoch 269/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2080 - accuracy: 0.9152 - val_loss: 0.6326 - val_accuracy: 0.7740\n","Epoch 270/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2106 - accuracy: 0.9152 - val_loss: 0.6080 - val_accuracy: 0.7539\n","Epoch 271/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2079 - accuracy: 0.9147 - val_loss: 0.6225 - val_accuracy: 0.7582\n","Epoch 272/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2103 - accuracy: 0.9139 - val_loss: 0.6273 - val_accuracy: 0.7525\n","Epoch 273/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2081 - accuracy: 0.9145 - val_loss: 0.6598 - val_accuracy: 0.7382\n","Epoch 274/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2081 - accuracy: 0.9157 - val_loss: 0.5733 - val_accuracy: 0.7682\n","Epoch 275/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2105 - accuracy: 0.9142 - val_loss: 0.6118 - val_accuracy: 0.7411\n","Epoch 276/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2092 - accuracy: 0.9144 - val_loss: 0.6649 - val_accuracy: 0.7196\n","Epoch 277/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2081 - accuracy: 0.9153 - val_loss: 0.6107 - val_accuracy: 0.7468\n","Epoch 278/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2081 - accuracy: 0.9152 - val_loss: 0.6148 - val_accuracy: 0.7482\n","Epoch 279/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2061 - accuracy: 0.9165 - val_loss: 0.5902 - val_accuracy: 0.7654\n","Epoch 280/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2103 - accuracy: 0.9142 - val_loss: 0.5925 - val_accuracy: 0.7711\n","Epoch 281/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2066 - accuracy: 0.9153 - val_loss: 0.6660 - val_accuracy: 0.7139\n","Epoch 282/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2067 - accuracy: 0.9166 - val_loss: 0.6424 - val_accuracy: 0.7496\n","Epoch 283/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2062 - accuracy: 0.9170 - val_loss: 0.6337 - val_accuracy: 0.7511\n","Epoch 284/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2058 - accuracy: 0.9165 - val_loss: 0.7257 - val_accuracy: 0.6924\n","Epoch 285/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2056 - accuracy: 0.9175 - val_loss: 0.7044 - val_accuracy: 0.7024\n","Epoch 286/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2030 - accuracy: 0.9179 - val_loss: 0.7165 - val_accuracy: 0.7096\n","Epoch 287/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2058 - accuracy: 0.9174 - val_loss: 0.6113 - val_accuracy: 0.7496\n","Epoch 288/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2044 - accuracy: 0.9178 - val_loss: 0.6206 - val_accuracy: 0.7425\n","Epoch 289/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2044 - accuracy: 0.9168 - val_loss: 0.6581 - val_accuracy: 0.7353\n","Epoch 290/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2070 - accuracy: 0.9152 - val_loss: 0.6287 - val_accuracy: 0.7454\n","Epoch 291/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2062 - accuracy: 0.9152 - val_loss: 0.5830 - val_accuracy: 0.7668\n","Epoch 292/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2045 - accuracy: 0.9171 - val_loss: 0.7264 - val_accuracy: 0.6910\n","Epoch 293/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2026 - accuracy: 0.9191 - val_loss: 0.6386 - val_accuracy: 0.7482\n","Epoch 294/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2048 - accuracy: 0.9169 - val_loss: 0.5959 - val_accuracy: 0.7697\n","Epoch 295/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2065 - accuracy: 0.9166 - val_loss: 0.6325 - val_accuracy: 0.7425\n","Epoch 296/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2032 - accuracy: 0.9181 - val_loss: 0.6840 - val_accuracy: 0.7253\n","Epoch 297/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2051 - accuracy: 0.9176 - val_loss: 0.6255 - val_accuracy: 0.7611\n","Epoch 298/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2040 - accuracy: 0.9178 - val_loss: 0.6773 - val_accuracy: 0.7325\n","Epoch 299/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2006 - accuracy: 0.9185 - val_loss: 0.6368 - val_accuracy: 0.7382\n","Epoch 300/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2032 - accuracy: 0.9169 - val_loss: 0.6663 - val_accuracy: 0.7253\n","Epoch 301/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2007 - accuracy: 0.9177 - val_loss: 0.7034 - val_accuracy: 0.7239\n","Epoch 302/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2038 - accuracy: 0.9169 - val_loss: 0.6665 - val_accuracy: 0.7353\n","Epoch 303/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2038 - accuracy: 0.9183 - val_loss: 0.7662 - val_accuracy: 0.6724\n","Epoch 304/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2029 - accuracy: 0.9188 - val_loss: 0.5970 - val_accuracy: 0.7754\n","Epoch 305/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2024 - accuracy: 0.9174 - val_loss: 0.6664 - val_accuracy: 0.7282\n","Epoch 306/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1991 - accuracy: 0.9198 - val_loss: 0.5987 - val_accuracy: 0.7668\n","Epoch 307/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1995 - accuracy: 0.9205 - val_loss: 0.6459 - val_accuracy: 0.7539\n","Epoch 308/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2005 - accuracy: 0.9193 - val_loss: 0.6469 - val_accuracy: 0.7468\n","Epoch 309/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1998 - accuracy: 0.9199 - val_loss: 0.5758 - val_accuracy: 0.7868\n","Epoch 310/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2004 - accuracy: 0.9187 - val_loss: 0.6547 - val_accuracy: 0.7496\n","Epoch 311/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1981 - accuracy: 0.9192 - val_loss: 0.7026 - val_accuracy: 0.7167\n","Epoch 312/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.2008 - accuracy: 0.9191 - val_loss: 0.6625 - val_accuracy: 0.7368\n","Epoch 313/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1987 - accuracy: 0.9193 - val_loss: 0.6937 - val_accuracy: 0.7239\n","Epoch 314/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1988 - accuracy: 0.9207 - val_loss: 0.6158 - val_accuracy: 0.7668\n","Epoch 315/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1999 - accuracy: 0.9189 - val_loss: 0.6853 - val_accuracy: 0.7368\n","Epoch 316/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1984 - accuracy: 0.9198 - val_loss: 0.6765 - val_accuracy: 0.7296\n","Epoch 317/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1991 - accuracy: 0.9193 - val_loss: 0.5899 - val_accuracy: 0.7582\n","Epoch 318/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.2024 - accuracy: 0.9176 - val_loss: 0.6026 - val_accuracy: 0.7525\n","Epoch 319/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1998 - accuracy: 0.9197 - val_loss: 0.6540 - val_accuracy: 0.7396\n","Epoch 320/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1976 - accuracy: 0.9195 - val_loss: 0.6626 - val_accuracy: 0.7239\n","Epoch 321/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1947 - accuracy: 0.9223 - val_loss: 0.6398 - val_accuracy: 0.7582\n","Epoch 322/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1958 - accuracy: 0.9209 - val_loss: 0.5919 - val_accuracy: 0.7539\n","Epoch 323/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1986 - accuracy: 0.9194 - val_loss: 0.6477 - val_accuracy: 0.7396\n","Epoch 324/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1987 - accuracy: 0.9203 - val_loss: 0.6205 - val_accuracy: 0.7697\n","Epoch 325/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1983 - accuracy: 0.9202 - val_loss: 0.6786 - val_accuracy: 0.7225\n","Epoch 326/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1956 - accuracy: 0.9203 - val_loss: 0.6504 - val_accuracy: 0.7482\n","Epoch 327/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1950 - accuracy: 0.9219 - val_loss: 0.7016 - val_accuracy: 0.7210\n","Epoch 328/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1976 - accuracy: 0.9210 - val_loss: 0.6269 - val_accuracy: 0.7568\n","Epoch 329/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1960 - accuracy: 0.9205 - val_loss: 0.6709 - val_accuracy: 0.7282\n","Epoch 330/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1941 - accuracy: 0.9220 - val_loss: 0.7063 - val_accuracy: 0.7139\n","Epoch 331/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1952 - accuracy: 0.9214 - val_loss: 0.6865 - val_accuracy: 0.7239\n","Epoch 332/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1955 - accuracy: 0.9223 - val_loss: 0.6973 - val_accuracy: 0.7139\n","Epoch 333/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1962 - accuracy: 0.9211 - val_loss: 0.6307 - val_accuracy: 0.7754\n","Epoch 334/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1950 - accuracy: 0.9222 - val_loss: 0.6453 - val_accuracy: 0.7525\n","Epoch 335/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1942 - accuracy: 0.9212 - val_loss: 0.6153 - val_accuracy: 0.7682\n","Epoch 336/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1942 - accuracy: 0.9222 - val_loss: 0.6380 - val_accuracy: 0.7568\n","Epoch 337/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1966 - accuracy: 0.9205 - val_loss: 0.6381 - val_accuracy: 0.7554\n","Epoch 338/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1945 - accuracy: 0.9218 - val_loss: 0.6851 - val_accuracy: 0.7353\n","Epoch 339/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1921 - accuracy: 0.9233 - val_loss: 0.6279 - val_accuracy: 0.7582\n","Epoch 340/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1921 - accuracy: 0.9220 - val_loss: 0.6492 - val_accuracy: 0.7296\n","Epoch 341/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1930 - accuracy: 0.9215 - val_loss: 0.5908 - val_accuracy: 0.7754\n","Epoch 342/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1950 - accuracy: 0.9225 - val_loss: 0.6422 - val_accuracy: 0.7425\n","Epoch 343/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1938 - accuracy: 0.9213 - val_loss: 0.5844 - val_accuracy: 0.7768\n","Epoch 344/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1927 - accuracy: 0.9237 - val_loss: 0.6895 - val_accuracy: 0.7296\n","Epoch 345/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1927 - accuracy: 0.9220 - val_loss: 0.5917 - val_accuracy: 0.7797\n","Epoch 346/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1901 - accuracy: 0.9229 - val_loss: 0.5750 - val_accuracy: 0.7825\n","Epoch 347/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1963 - accuracy: 0.9207 - val_loss: 0.5914 - val_accuracy: 0.7811\n","Epoch 348/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1950 - accuracy: 0.9217 - val_loss: 0.7160 - val_accuracy: 0.7110\n","Epoch 349/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1941 - accuracy: 0.9220 - val_loss: 0.6038 - val_accuracy: 0.7825\n","Epoch 350/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1897 - accuracy: 0.9235 - val_loss: 0.6551 - val_accuracy: 0.7496\n","Epoch 351/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1924 - accuracy: 0.9232 - val_loss: 0.6631 - val_accuracy: 0.7582\n","Epoch 352/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1939 - accuracy: 0.9230 - val_loss: 0.6950 - val_accuracy: 0.7482\n","Epoch 353/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1903 - accuracy: 0.9234 - val_loss: 0.6428 - val_accuracy: 0.7654\n","Epoch 354/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1913 - accuracy: 0.9231 - val_loss: 0.7166 - val_accuracy: 0.7253\n","Epoch 355/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1918 - accuracy: 0.9239 - val_loss: 0.6462 - val_accuracy: 0.7625\n","Epoch 356/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1914 - accuracy: 0.9235 - val_loss: 0.5958 - val_accuracy: 0.7811\n","Epoch 357/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1914 - accuracy: 0.9237 - val_loss: 0.6199 - val_accuracy: 0.7854\n","Epoch 358/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1901 - accuracy: 0.9236 - val_loss: 0.6073 - val_accuracy: 0.7940\n","Epoch 359/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1922 - accuracy: 0.9222 - val_loss: 0.6773 - val_accuracy: 0.7568\n","Epoch 360/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1906 - accuracy: 0.9242 - val_loss: 0.6506 - val_accuracy: 0.7625\n","Epoch 361/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1889 - accuracy: 0.9236 - val_loss: 0.7202 - val_accuracy: 0.7282\n","Epoch 362/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1895 - accuracy: 0.9240 - val_loss: 0.6229 - val_accuracy: 0.7711\n","Epoch 363/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1896 - accuracy: 0.9237 - val_loss: 0.6277 - val_accuracy: 0.7740\n","Epoch 364/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1892 - accuracy: 0.9236 - val_loss: 0.6703 - val_accuracy: 0.7411\n","Epoch 365/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1888 - accuracy: 0.9238 - val_loss: 0.6869 - val_accuracy: 0.7296\n","Epoch 366/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1920 - accuracy: 0.9225 - val_loss: 0.6806 - val_accuracy: 0.7482\n","Epoch 367/400\n","70/70 [==============================] - 2s 29ms/step - loss: 0.1856 - accuracy: 0.9268 - val_loss: 0.5915 - val_accuracy: 0.7969\n","Epoch 368/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1899 - accuracy: 0.9234 - val_loss: 0.7062 - val_accuracy: 0.7282\n","Epoch 369/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1886 - accuracy: 0.9237 - val_loss: 0.5932 - val_accuracy: 0.7897\n","Epoch 370/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1895 - accuracy: 0.9241 - val_loss: 0.6370 - val_accuracy: 0.7654\n","Epoch 371/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1894 - accuracy: 0.9256 - val_loss: 0.6344 - val_accuracy: 0.7682\n","Epoch 372/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1880 - accuracy: 0.9253 - val_loss: 0.6503 - val_accuracy: 0.7568\n","Epoch 373/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1889 - accuracy: 0.9245 - val_loss: 0.7215 - val_accuracy: 0.7239\n","Epoch 374/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1860 - accuracy: 0.9261 - val_loss: 0.6451 - val_accuracy: 0.7582\n","Epoch 375/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1869 - accuracy: 0.9242 - val_loss: 0.6826 - val_accuracy: 0.7411\n","Epoch 376/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1884 - accuracy: 0.9258 - val_loss: 0.6437 - val_accuracy: 0.7525\n","Epoch 377/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1882 - accuracy: 0.9249 - val_loss: 0.6525 - val_accuracy: 0.7654\n","Epoch 378/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1854 - accuracy: 0.9249 - val_loss: 0.7438 - val_accuracy: 0.7268\n","Epoch 379/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1858 - accuracy: 0.9256 - val_loss: 0.7286 - val_accuracy: 0.7253\n","Epoch 380/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1838 - accuracy: 0.9266 - val_loss: 0.6824 - val_accuracy: 0.7411\n","Epoch 381/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1865 - accuracy: 0.9257 - val_loss: 0.7042 - val_accuracy: 0.7396\n","Epoch 382/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1869 - accuracy: 0.9253 - val_loss: 0.6063 - val_accuracy: 0.7711\n","Epoch 383/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1862 - accuracy: 0.9251 - val_loss: 0.6963 - val_accuracy: 0.7282\n","Epoch 384/400\n","70/70 [==============================] - 2s 29ms/step - loss: 0.1863 - accuracy: 0.9252 - val_loss: 0.6523 - val_accuracy: 0.7496\n","Epoch 385/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1865 - accuracy: 0.9253 - val_loss: 0.6650 - val_accuracy: 0.7368\n","Epoch 386/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1829 - accuracy: 0.9273 - val_loss: 0.5896 - val_accuracy: 0.7926\n","Epoch 387/400\n","70/70 [==============================] - 2s 27ms/step - loss: 0.1869 - accuracy: 0.9255 - val_loss: 0.6352 - val_accuracy: 0.7682\n","Epoch 388/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1867 - accuracy: 0.9254 - val_loss: 0.6739 - val_accuracy: 0.7511\n","Epoch 389/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1859 - accuracy: 0.9265 - val_loss: 0.6490 - val_accuracy: 0.7511\n","Epoch 390/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1848 - accuracy: 0.9256 - val_loss: 0.6634 - val_accuracy: 0.7568\n","Epoch 391/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1851 - accuracy: 0.9262 - val_loss: 0.6872 - val_accuracy: 0.7368\n","Epoch 392/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1834 - accuracy: 0.9258 - val_loss: 0.7523 - val_accuracy: 0.7024\n","Epoch 393/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1827 - accuracy: 0.9270 - val_loss: 0.6570 - val_accuracy: 0.7554\n","Epoch 394/400\n","70/70 [==============================] - 2s 29ms/step - loss: 0.1858 - accuracy: 0.9262 - val_loss: 0.6841 - val_accuracy: 0.7454\n","Epoch 395/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1829 - accuracy: 0.9263 - val_loss: 0.6575 - val_accuracy: 0.7525\n","Epoch 396/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1867 - accuracy: 0.9248 - val_loss: 0.6202 - val_accuracy: 0.7725\n","Epoch 397/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1827 - accuracy: 0.9260 - val_loss: 0.6231 - val_accuracy: 0.7625\n","Epoch 398/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1842 - accuracy: 0.9275 - val_loss: 0.6393 - val_accuracy: 0.7711\n","Epoch 399/400\n","70/70 [==============================] - 2s 29ms/step - loss: 0.1854 - accuracy: 0.9254 - val_loss: 0.7242 - val_accuracy: 0.7239\n","Epoch 400/400\n","70/70 [==============================] - 2s 28ms/step - loss: 0.1842 - accuracy: 0.9267 - val_loss: 0.6572 - val_accuracy: 0.7368\n","\n"," Evaluate the new model against the test set:\n","1/1 [==============================] - 0s 1ms/step - loss: 0.2911 - accuracy: 0.9100\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[0.29108288884162903, 0.9100000262260437]"]},"metadata":{"tags":[]},"execution_count":15},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"1B3Af0eamT4m","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1597689958534,"user_tz":240,"elapsed":3503,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"e4936a08-e50e-45df-9073-8e1d97a0f63e"},"source":["#Create Confusion Matrix\n","!pip install -q pycm\n","from pycm import ConfusionMatrix\n","yhat_classes = my_model.predict_classes(x_test_normalized, verbose = 0)\n","cm = ConfusionMatrix(actual_vector=Y_test.to_numpy(), predict_vector=yhat_classes)\n","print(cm)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Predict   0         1         2         [0]       [1]       [2]       \n","Actual\n","0         0         0         0         0         0         0         \n","\n","1         0         0         0         0         0         0         \n","\n","2         0         0         0         0         0         0         \n","\n","[0]       154       3         0         0         0         0         \n","\n","[1]       31        657       33        0         0         0         \n","\n","[2]       0         14        8         0         0         0         \n","\n","\n","\n","\n","\n","Overall Statistics : \n","\n","95% CI                                                            (0.0,0.0)\n","ACC Macro                                                         0.66667\n","ARI                                                               0.68084\n","AUNP                                                              None\n","AUNU                                                              None\n","Bangdiwala B                                                      None\n","Bennett S                                                         -0.2\n","CBA                                                               0.0\n","CSI                                                               None\n","Chi-Squared                                                       None\n","Chi-Squared DF                                                    25\n","Conditional Entropy                                               0.46432\n","Cramer V                                                          None\n","Cross Entropy                                                     0\n","F1 Macro                                                          0.0\n","F1 Micro                                                          0.0\n","FNR Macro                                                         None\n","FNR Micro                                                         1.0\n","FPR Macro                                                         0.16667\n","FPR Micro                                                         0.2\n","Gwet AC1                                                          -0.15754\n","Hamming Loss                                                      1.0\n","Joint Entropy                                                     1.29096\n","KL Divergence                                                     None\n","Kappa                                                             0.0\n","Kappa 95% CI                                                      (0.0,0.0)\n","Kappa No Prevalence                                               -1.0\n","Kappa Standard Error                                              0.0\n","Kappa Unbiased                                                    -0.46949\n","Krippendorff Alpha                                                -0.46868\n","Lambda A                                                          0.68715\n","Lambda B                                                          0.66814\n","Mutual Information                                                0.52026\n","NIR                                                               0.80111\n","Overall ACC                                                       0.0\n","Overall CEN                                                       0.116\n","Overall J                                                         (0.0,0.0)\n","Overall MCC                                                       0.0\n","Overall MCEN                                                      0.116\n","Overall RACC                                                      0.0\n","Overall RACCU                                                     0.31949\n","P-Value                                                           1\n","PPV Macro                                                         None\n","PPV Micro                                                         0.0\n","Pearson C                                                         None\n","Phi-Squared                                                       None\n","RCI                                                               0.62938\n","RR                                                                150.0\n","Reference Entropy                                                 0.82663\n","Response Entropy                                                  0.98458\n","SOA1(Landis & Koch)                                               Slight\n","SOA2(Fleiss)                                                      Poor\n","SOA3(Altman)                                                      Poor\n","SOA4(Cicchetti)                                                   Poor\n","SOA5(Cramer)                                                      None\n","SOA6(Matthews)                                                    Negligible\n","Scott PI                                                          -0.46949\n","Standard Error                                                    0.0\n","TNR Macro                                                         0.83333\n","TNR Micro                                                         0.8\n","TPR Macro                                                         None\n","TPR Micro                                                         0.0\n","Zero-one Loss                                                     900\n","\n","Class Statistics :\n","\n","Classes                                                           0             1             2             [0]           [1]           [2]           \n","ACC(Accuracy)                                                     0.79444       0.25111       0.95444       0.82556       0.19889       0.97556       \n","AGF(Adjusted F-score)                                             0.0           0.0           0.0           0.0           0.0           0.0           \n","AGM(Adjusted geometric mean)                                      None          None          None          0             0             0             \n","AM(Difference between automatic and manual classification)        185           674           41            -157          -721          -22           \n","AUC(Area under the ROC curve)                                     None          None          None          0.5           0.5           0.5           \n","AUCI(AUC value interpretation)                                    None          None          None          Poor          Poor          Poor          \n","AUPR(Area under the PR curve)                                     None          None          None          None          None          None          \n","BCD(Bray-Curtis dissimilarity)                                    0.10278       0.37444       0.02278       0.08722       0.40056       0.01222       \n","BM(Informedness or bookmaker informedness)                        None          None          None          0.0           0.0           0.0           \n","CEN(Confusion entropy)                                            0.1963        0.05623       0.21435       0.04106       0.15685       0.28467       \n","DOR(Diagnostic odds ratio)                                        None          None          None          None          None          None          \n","DP(Discriminant power)                                            None          None          None          None          None          None          \n","DPI(Discriminant power interpretation)                            None          None          None          None          None          None          \n","ERR(Error rate)                                                   0.20556       0.74889       0.04556       0.17444       0.80111       0.02444       \n","F0.5(F0.5 score)                                                  0.0           0.0           0.0           0.0           0.0           0.0           \n","F1(F1 score - harmonic mean of precision and sensitivity)         0.0           0.0           0.0           0.0           0.0           0.0           \n","F2(F2 score)                                                      0.0           0.0           0.0           0.0           0.0           0.0           \n","FDR(False discovery rate)                                         1.0           1.0           1.0           None          None          None          \n","FN(False negative/miss/type 2 error)                              0             0             0             157           721           22            \n","FNR(Miss rate or false negative rate)                             None          None          None          1.0           1.0           1.0           \n","FOR(False omission rate)                                          0.0           0.0           0.0           0.17444       0.80111       0.02444       \n","FP(False positive/type 1 error/false alarm)                       185           674           41            0             0             0             \n","FPR(Fall-out or false positive rate)                              0.20556       0.74889       0.04556       0.0           0.0           0.0           \n","G(G-measure geometric mean of precision and sensitivity)          None          None          None          None          None          None          \n","GI(Gini index)                                                    None          None          None          0.0           0.0           0.0           \n","GM(G-mean geometric mean of specificity and sensitivity)          None          None          None          0.0           0.0           0.0           \n","IBA(Index of balanced accuracy)                                   None          None          None          0.0           0.0           0.0           \n","ICSI(Individual classification success index)                     None          None          None          None          None          None          \n","IS(Information score)                                             None          None          None          None          None          None          \n","J(Jaccard index)                                                  0.0           0.0           0.0           0.0           0.0           0.0           \n","LS(Lift score)                                                    None          None          None          None          None          None          \n","MCC(Matthews correlation coefficient)                             None          None          None          None          None          None          \n","MCCI(Matthews correlation coefficient interpretation)             None          None          None          None          None          None          \n","MCEN(Modified confusion entropy)                                  0.1963        0.05623       0.21435       0.04106       0.15685       0.28467       \n","MK(Markedness)                                                    0.0           0.0           0.0           None          None          None          \n","N(Condition negative)                                             900           900           900           743           179           878           \n","NLR(Negative likelihood ratio)                                    None          None          None          1.0           1.0           1.0           \n","NLRI(Negative likelihood ratio interpretation)                    None          None          None          Negligible    Negligible    Negligible    \n","NPV(Negative predictive value)                                    1.0           1.0           1.0           0.82556       0.19889       0.97556       \n","OC(Overlap coefficient)                                           None          None          None          None          None          None          \n","OOC(Otsuka-Ochiai coefficient)                                    None          None          None          None          None          None          \n","OP(Optimized precision)                                           None          None          None          -0.17444      -0.80111      -0.02444      \n","P(Condition positive or support)                                  0             0             0             157           721           22            \n","PLR(Positive likelihood ratio)                                    None          None          None          None          None          None          \n","PLRI(Positive likelihood ratio interpretation)                    None          None          None          None          None          None          \n","POP(Population)                                                   900           900           900           900           900           900           \n","PPV(Precision or positive predictive value)                       0.0           0.0           0.0           None          None          None          \n","PRE(Prevalence)                                                   0.0           0.0           0.0           0.17444       0.80111       0.02444       \n","Q(Yule Q - coefficient of colligation)                            None          None          None          None          None          None          \n","QI(Yule Q interpretation)                                         None          None          None          None          None          None          \n","RACC(Random accuracy)                                             0.0           0.0           0.0           0.0           0.0           0.0           \n","RACCU(Random accuracy unbiased)                                   0.01056       0.14021       0.00052       0.00761       0.16044       0.00015       \n","TN(True negative/correct rejection)                               715           226           859           743           179           878           \n","TNR(Specificity or true negative rate)                            0.79444       0.25111       0.95444       1.0           1.0           1.0           \n","TON(Test outcome negative)                                        715           226           859           900           900           900           \n","TOP(Test outcome positive)                                        185           674           41            0             0             0             \n","TP(True positive/hit)                                             0             0             0             0             0             0             \n","TPR(Sensitivity, recall, hit rate, or true positive rate)         None          None          None          0.0           0.0           0.0           \n","Y(Youden index)                                                   None          None          None          0.0           0.0           0.0           \n","dInd(Distance index)                                              None          None          None          1.0           1.0           1.0           \n","sInd(Similarity index)                                            None          None          None          0.29289       0.29289       0.29289       \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Ib-MsIwdHKql","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":141},"executionInfo":{"status":"ok","timestamp":1594829224693,"user_tz":240,"elapsed":286,"user":{"displayName":"Benjamin Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjk-X-xY0Shww4LJnya3t7kmkZ_jdFshpN7QCgydQ=s64","userId":"07662009587488003776"}},"outputId":"34eb2e36-965c-468d-b90f-ffe300518d76"},"source":["#Find the log loss to evaluate model. Log Loss can be used as an evaluation metric\n","#We want the log loss to be closer to 0\n","\n","\n","from IPython.display import display\n","\n","np.set_printoptions(precision=4)\n","np.set_printoptions(suppress=True)\n","\n","pred = my_model.predict(x_test_normalized)\n","\n","print(\"Numpy array of predictions\")\n","display(pred[0:5])\n","\n","score = metrics.log_loss(Y_test,pred)\n","print(\"Log loss score: {}\".format(score))\n","\n","pred = np.argmax(pred,axis=1)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Numpy array of predictions\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/plain":["array([[0.2733, 0.7266, 0.    ],\n","       [0.9928, 0.0058, 0.0015],\n","       [0.    , 1.    , 0.    ],\n","       [0.    , 1.    , 0.    ],\n","       [0.    , 0.8595, 0.1405]], dtype=float32)"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Log loss score: 0.374684860025369\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zIUIvI8gpnVf","colab_type":"code","colab":{}},"source":["#Created and imported an entirely new csv file with test data\n","column_names = ['Diagnosis','Age','Sex','L1','L2','L3','L4', 'R1','R2', 'R3','Lf1','Lf2','Lf3']\n","\n","#Read files using pandas\n","raw_dataset = pd.read_csv(\"test.csv\", names=column_names, na_values = \"?\", comment='\\t', sep=\",\", skipinitialspace=True)\n","\n","\n","target = 'Diagnosis'\n","X_test = raw_dataset.loc[:, raw_dataset.columns!= target]\n","Y_test = raw_dataset.loc[:, raw_dataset.columns==target]\n","\n","x_test_normalized = norm(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6nb3JX6vqfyk","colab_type":"code","colab":{}},"source":["\n","# Evaluate against the new test set.\n","print(\"\\n Evaluate the new model against the test set:\")\n","my_model.evaluate(x=x_test_normalized, y=Y_test, batch_size=batch_size)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nf6Rfnu6qs0j","colab_type":"code","colab":{}},"source":["#Create another Confusion Matrix\n","yhat_classes = my_model.predict_classes(x_test_normalized, verbose = 0)\n","cm = ConfusionMatrix(actual_vector=Y_test.to_numpy(), predict_vector=yhat_classes)\n","print(cm)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9yaLPdj8DhPu","colab_type":"code","colab":{}},"source":["column_names = ['Diagnosis','Age','Sex','L1','L2','L3','L4', 'R1','R2', 'R3','Lf1','Lf2','Lf3']\n","\n","#Read files using pandas\n","raw_dataset = pd.read_csv(\"training.csv\", names=column_names, na_values = \"?\", comment='\\t', sep=\",\", skipinitialspace=True)\n","#shuffled_train_df = raw_dataset.reindex(np.random.permutation(raw_dataset))\n","\n","\n","target = 'Diagnosis'\n","X = raw_dataset.loc[:, raw_dataset.columns!= target]\n","Y = raw_dataset.loc[:, raw_dataset.columns==target]\n","\n","\n","X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.03, random_state = 0)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9xkiO0WdD3ZN","colab_type":"code","colab":{}},"source":["feature_columns =[]\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NZMQYuoO_220","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2sRzrstO_3KL","colab_type":"text"},"source":["Hi DOnt run "]}]}